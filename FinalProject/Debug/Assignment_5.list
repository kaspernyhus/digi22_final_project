
Assignment_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b68  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08001cf0  08001cf0  00011cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e3c  08001e3c  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08001e3c  08001e3c  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e3c  08001e3c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e3c  08001e3c  00011e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e40  08001e40  00011e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08001e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000094  08001ed8  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001ed8  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000487a  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000efb  00000000  00000000  0002493e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000550  00000000  00000000  00025840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004c8  00000000  00000000  00025d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003474  00000000  00000000  00026258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000510b  00000000  00000000  000296cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a20e  00000000  00000000  0002e7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000889e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c24  00000000  00000000  00088a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001cd8 	.word	0x08001cd8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08001cd8 	.word	0x08001cd8

080001c8 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80001d2:	2300      	movs	r3, #0
 80001d4:	617b      	str	r3, [r7, #20]
 80001d6:	2300      	movs	r3, #0
 80001d8:	613b      	str	r3, [r7, #16]
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]
 80001e2:	e07c      	b.n	80002de <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80001e4:	2201      	movs	r2, #1
 80001e6:	697b      	ldr	r3, [r7, #20]
 80001e8:	fa02 f303 	lsl.w	r3, r2, r3
 80001ec:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	693a      	ldr	r2, [r7, #16]
 80001f4:	4013      	ands	r3, r2
 80001f6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d16b      	bne.n	80002d8 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	791b      	ldrb	r3, [r3, #4]
 8000204:	2b01      	cmp	r3, #1
 8000206:	d003      	beq.n	8000210 <GPIO_Init+0x48>
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	791b      	ldrb	r3, [r3, #4]
 800020c:	2b02      	cmp	r3, #2
 800020e:	d134      	bne.n	800027a <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	689a      	ldr	r2, [r3, #8]
 8000214:	697b      	ldr	r3, [r7, #20]
 8000216:	005b      	lsls	r3, r3, #1
 8000218:	2103      	movs	r1, #3
 800021a:	fa01 f303 	lsl.w	r3, r1, r3
 800021e:	43db      	mvns	r3, r3
 8000220:	401a      	ands	r2, r3
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	689a      	ldr	r2, [r3, #8]
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	795b      	ldrb	r3, [r3, #5]
 800022e:	4619      	mov	r1, r3
 8000230:	697b      	ldr	r3, [r7, #20]
 8000232:	005b      	lsls	r3, r3, #1
 8000234:	fa01 f303 	lsl.w	r3, r1, r3
 8000238:	431a      	orrs	r2, r3
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	889b      	ldrh	r3, [r3, #4]
 8000242:	b29a      	uxth	r2, r3
 8000244:	697b      	ldr	r3, [r7, #20]
 8000246:	b29b      	uxth	r3, r3
 8000248:	4619      	mov	r1, r3
 800024a:	2301      	movs	r3, #1
 800024c:	408b      	lsls	r3, r1
 800024e:	b29b      	uxth	r3, r3
 8000250:	43db      	mvns	r3, r3
 8000252:	b29b      	uxth	r3, r3
 8000254:	4013      	ands	r3, r2
 8000256:	b29a      	uxth	r2, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	889b      	ldrh	r3, [r3, #4]
 8000260:	b29a      	uxth	r2, r3
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	799b      	ldrb	r3, [r3, #6]
 8000266:	4619      	mov	r1, r3
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	b29b      	uxth	r3, r3
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	b29b      	uxth	r3, r3
 8000272:	4313      	orrs	r3, r2
 8000274:	b29a      	uxth	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	697b      	ldr	r3, [r7, #20]
 8000280:	005b      	lsls	r3, r3, #1
 8000282:	2103      	movs	r1, #3
 8000284:	fa01 f303 	lsl.w	r3, r1, r3
 8000288:	43db      	mvns	r3, r3
 800028a:	401a      	ands	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	791b      	ldrb	r3, [r3, #4]
 8000298:	4619      	mov	r1, r3
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	fa01 f303 	lsl.w	r3, r1, r3
 80002a2:	431a      	orrs	r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	68da      	ldr	r2, [r3, #12]
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	b29b      	uxth	r3, r3
 80002b0:	005b      	lsls	r3, r3, #1
 80002b2:	2103      	movs	r1, #3
 80002b4:	fa01 f303 	lsl.w	r3, r1, r3
 80002b8:	43db      	mvns	r3, r3
 80002ba:	401a      	ands	r2, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	68da      	ldr	r2, [r3, #12]
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	79db      	ldrb	r3, [r3, #7]
 80002c8:	4619      	mov	r1, r3
 80002ca:	697b      	ldr	r3, [r7, #20]
 80002cc:	005b      	lsls	r3, r3, #1
 80002ce:	fa01 f303 	lsl.w	r3, r1, r3
 80002d2:	431a      	orrs	r2, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	3301      	adds	r3, #1
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	2b0f      	cmp	r3, #15
 80002e2:	f67f af7f 	bls.w	80001e4 <GPIO_Init+0x1c>
    }
  }
}
 80002e6:	bf00      	nop
 80002e8:	bf00      	nop
 80002ea:	371c      	adds	r7, #28
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	807b      	strh	r3, [r7, #2]
 8000300:	4613      	mov	r3, r2
 8000302:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000308:	2300      	movs	r3, #0
 800030a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800030c:	787a      	ldrb	r2, [r7, #1]
 800030e:	887b      	ldrh	r3, [r7, #2]
 8000310:	f003 0307 	and.w	r3, r3, #7
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	fa02 f303 	lsl.w	r3, r2, r3
 800031a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800031c:	887b      	ldrh	r3, [r7, #2]
 800031e:	08db      	lsrs	r3, r3, #3
 8000320:	b29b      	uxth	r3, r3
 8000322:	461a      	mov	r2, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	3208      	adds	r2, #8
 8000328:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800032c:	887b      	ldrh	r3, [r7, #2]
 800032e:	f003 0307 	and.w	r3, r3, #7
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	210f      	movs	r1, #15
 8000336:	fa01 f303 	lsl.w	r3, r1, r3
 800033a:	43db      	mvns	r3, r3
 800033c:	8879      	ldrh	r1, [r7, #2]
 800033e:	08c9      	lsrs	r1, r1, #3
 8000340:	b289      	uxth	r1, r1
 8000342:	4608      	mov	r0, r1
 8000344:	ea02 0103 	and.w	r1, r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f100 0208 	add.w	r2, r0, #8
 800034e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000352:	887b      	ldrh	r3, [r7, #2]
 8000354:	08db      	lsrs	r3, r3, #3
 8000356:	b29b      	uxth	r3, r3
 8000358:	461a      	mov	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	3208      	adds	r2, #8
 800035e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000362:	68fa      	ldr	r2, [r7, #12]
 8000364:	4313      	orrs	r3, r2
 8000366:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000368:	887b      	ldrh	r3, [r7, #2]
 800036a:	08db      	lsrs	r3, r3, #3
 800036c:	b29b      	uxth	r3, r3
 800036e:	461a      	mov	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	3208      	adds	r2, #8
 8000374:	68b9      	ldr	r1, [r7, #8]
 8000376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800037a:	bf00      	nop
 800037c:	3714      	adds	r7, #20
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
	...

08000388 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000388:	b480      	push	{r7}
 800038a:	b08b      	sub	sp, #44	; 0x2c
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	623b      	str	r3, [r7, #32]
 8000394:	2300      	movs	r3, #0
 8000396:	61fb      	str	r3, [r7, #28]
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]
 80003a0:	2300      	movs	r3, #0
 80003a2:	613b      	str	r3, [r7, #16]
 80003a4:	2300      	movs	r3, #0
 80003a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	2300      	movs	r3, #0
 80003ae:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003b0:	4b8b      	ldr	r3, [pc, #556]	; (80005e0 <RCC_GetClocksFreq+0x258>)
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	f003 030c 	and.w	r3, r3, #12
 80003b8:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80003ba:	6a3b      	ldr	r3, [r7, #32]
 80003bc:	2b08      	cmp	r3, #8
 80003be:	d011      	beq.n	80003e4 <RCC_GetClocksFreq+0x5c>
 80003c0:	6a3b      	ldr	r3, [r7, #32]
 80003c2:	2b08      	cmp	r3, #8
 80003c4:	d837      	bhi.n	8000436 <RCC_GetClocksFreq+0xae>
 80003c6:	6a3b      	ldr	r3, [r7, #32]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d003      	beq.n	80003d4 <RCC_GetClocksFreq+0x4c>
 80003cc:	6a3b      	ldr	r3, [r7, #32]
 80003ce:	2b04      	cmp	r3, #4
 80003d0:	d004      	beq.n	80003dc <RCC_GetClocksFreq+0x54>
 80003d2:	e030      	b.n	8000436 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a83      	ldr	r2, [pc, #524]	; (80005e4 <RCC_GetClocksFreq+0x25c>)
 80003d8:	601a      	str	r2, [r3, #0]
      break;
 80003da:	e030      	b.n	800043e <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a81      	ldr	r2, [pc, #516]	; (80005e4 <RCC_GetClocksFreq+0x25c>)
 80003e0:	601a      	str	r2, [r3, #0]
      break;
 80003e2:	e02c      	b.n	800043e <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80003e4:	4b7e      	ldr	r3, [pc, #504]	; (80005e0 <RCC_GetClocksFreq+0x258>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80003ec:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80003ee:	4b7c      	ldr	r3, [pc, #496]	; (80005e0 <RCC_GetClocksFreq+0x258>)
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003f6:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80003f8:	69fb      	ldr	r3, [r7, #28]
 80003fa:	0c9b      	lsrs	r3, r3, #18
 80003fc:	3302      	adds	r3, #2
 80003fe:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000400:	69bb      	ldr	r3, [r7, #24]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d105      	bne.n	8000412 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000406:	69fb      	ldr	r3, [r7, #28]
 8000408:	4a77      	ldr	r2, [pc, #476]	; (80005e8 <RCC_GetClocksFreq+0x260>)
 800040a:	fb02 f303 	mul.w	r3, r2, r3
 800040e:	627b      	str	r3, [r7, #36]	; 0x24
 8000410:	e00d      	b.n	800042e <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000412:	4b73      	ldr	r3, [pc, #460]	; (80005e0 <RCC_GetClocksFreq+0x258>)
 8000414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000416:	f003 030f 	and.w	r3, r3, #15
 800041a:	3301      	adds	r3, #1
 800041c:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 800041e:	4a71      	ldr	r2, [pc, #452]	; (80005e4 <RCC_GetClocksFreq+0x25c>)
 8000420:	697b      	ldr	r3, [r7, #20]
 8000422:	fbb2 f2f3 	udiv	r2, r2, r3
 8000426:	69fb      	ldr	r3, [r7, #28]
 8000428:	fb02 f303 	mul.w	r3, r2, r3
 800042c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000432:	601a      	str	r2, [r3, #0]
      break;
 8000434:	e003      	b.n	800043e <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a6a      	ldr	r2, [pc, #424]	; (80005e4 <RCC_GetClocksFreq+0x25c>)
 800043a:	601a      	str	r2, [r3, #0]
      break;
 800043c:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800043e:	4b68      	ldr	r3, [pc, #416]	; (80005e0 <RCC_GetClocksFreq+0x258>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000446:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000448:	6a3b      	ldr	r3, [r7, #32]
 800044a:	091b      	lsrs	r3, r3, #4
 800044c:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 800044e:	4a67      	ldr	r2, [pc, #412]	; (80005ec <RCC_GetClocksFreq+0x264>)
 8000450:	6a3b      	ldr	r3, [r7, #32]
 8000452:	4413      	add	r3, r2
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	b2db      	uxtb	r3, r3
 8000458:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	40da      	lsrs	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000466:	4b5e      	ldr	r3, [pc, #376]	; (80005e0 <RCC_GetClocksFreq+0x258>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800046e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000470:	6a3b      	ldr	r3, [r7, #32]
 8000472:	0a1b      	lsrs	r3, r3, #8
 8000474:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000476:	4a5d      	ldr	r2, [pc, #372]	; (80005ec <RCC_GetClocksFreq+0x264>)
 8000478:	6a3b      	ldr	r3, [r7, #32]
 800047a:	4413      	add	r3, r2
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	b2db      	uxtb	r3, r3
 8000480:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	685a      	ldr	r2, [r3, #4]
 8000486:	693b      	ldr	r3, [r7, #16]
 8000488:	40da      	lsrs	r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800048e:	4b54      	ldr	r3, [pc, #336]	; (80005e0 <RCC_GetClocksFreq+0x258>)
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000496:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000498:	6a3b      	ldr	r3, [r7, #32]
 800049a:	0adb      	lsrs	r3, r3, #11
 800049c:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 800049e:	4a53      	ldr	r2, [pc, #332]	; (80005ec <RCC_GetClocksFreq+0x264>)
 80004a0:	6a3b      	ldr	r3, [r7, #32]
 80004a2:	4413      	add	r3, r2
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	685a      	ldr	r2, [r3, #4]
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	40da      	lsrs	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80004b6:	4b4a      	ldr	r3, [pc, #296]	; (80005e0 <RCC_GetClocksFreq+0x258>)
 80004b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80004be:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80004c0:	6a3b      	ldr	r3, [r7, #32]
 80004c2:	091b      	lsrs	r3, r3, #4
 80004c4:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80004c6:	4a4a      	ldr	r2, [pc, #296]	; (80005f0 <RCC_GetClocksFreq+0x268>)
 80004c8:	6a3b      	ldr	r3, [r7, #32]
 80004ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80004d2:	693b      	ldr	r3, [r7, #16]
 80004d4:	f003 0310 	and.w	r3, r3, #16
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d006      	beq.n	80004ea <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80004dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004de:	693b      	ldr	r3, [r7, #16]
 80004e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	e003      	b.n	80004f2 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80004f2:	4b3b      	ldr	r3, [pc, #236]	; (80005e0 <RCC_GetClocksFreq+0x258>)
 80004f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f6:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80004fa:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80004fc:	6a3b      	ldr	r3, [r7, #32]
 80004fe:	0a5b      	lsrs	r3, r3, #9
 8000500:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000502:	4a3b      	ldr	r2, [pc, #236]	; (80005f0 <RCC_GetClocksFreq+0x268>)
 8000504:	6a3b      	ldr	r3, [r7, #32]
 8000506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800050a:	b29b      	uxth	r3, r3
 800050c:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800050e:	693b      	ldr	r3, [r7, #16]
 8000510:	f003 0310 	and.w	r3, r3, #16
 8000514:	2b00      	cmp	r3, #0
 8000516:	d006      	beq.n	8000526 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	615a      	str	r2, [r3, #20]
 8000524:	e003      	b.n	800052e <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800052e:	4b2c      	ldr	r3, [pc, #176]	; (80005e0 <RCC_GetClocksFreq+0x258>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0310 	and.w	r3, r3, #16
 8000536:	2b10      	cmp	r3, #16
 8000538:	d003      	beq.n	8000542 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4a29      	ldr	r2, [pc, #164]	; (80005e4 <RCC_GetClocksFreq+0x25c>)
 800053e:	619a      	str	r2, [r3, #24]
 8000540:	e003      	b.n	800054a <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 800054a:	4b25      	ldr	r3, [pc, #148]	; (80005e0 <RCC_GetClocksFreq+0x258>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0320 	and.w	r3, r3, #32
 8000552:	2b20      	cmp	r3, #32
 8000554:	d003      	beq.n	800055e <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a22      	ldr	r2, [pc, #136]	; (80005e4 <RCC_GetClocksFreq+0x25c>)
 800055a:	61da      	str	r2, [r3, #28]
 800055c:	e003      	b.n	8000566 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000566:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <RCC_GetClocksFreq+0x258>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800056e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000572:	d10d      	bne.n	8000590 <RCC_GetClocksFreq+0x208>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800057a:	429a      	cmp	r2, r3
 800057c:	d108      	bne.n	8000590 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 800057e:	68fa      	ldr	r2, [r7, #12]
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	429a      	cmp	r2, r3
 8000584:	d104      	bne.n	8000590 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000588:	005a      	lsls	r2, r3, #1
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	621a      	str	r2, [r3, #32]
 800058e:	e003      	b.n	8000598 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	68da      	ldr	r2, [r3, #12]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <RCC_GetClocksFreq+0x258>)
 800059a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005a4:	d10d      	bne.n	80005c2 <RCC_GetClocksFreq+0x23a>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d108      	bne.n	80005c2 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80005b0:	68fa      	ldr	r2, [r7, #12]
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d104      	bne.n	80005c2 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80005b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ba:	005a      	lsls	r2, r3, #1
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	625a      	str	r2, [r3, #36]	; 0x24
 80005c0:	e003      	b.n	80005ca <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	68da      	ldr	r2, [r3, #12]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <RCC_GetClocksFreq+0x258>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0303 	and.w	r3, r3, #3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d10e      	bne.n	80005f4 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	68da      	ldr	r2, [r3, #12]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	629a      	str	r2, [r3, #40]	; 0x28
 80005de:	e028      	b.n	8000632 <RCC_GetClocksFreq+0x2aa>
 80005e0:	40021000 	.word	0x40021000
 80005e4:	007a1200 	.word	0x007a1200
 80005e8:	003d0900 	.word	0x003d0900
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80005f4:	4b6c      	ldr	r3, [pc, #432]	; (80007a8 <RCC_GetClocksFreq+0x420>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f8:	f003 0303 	and.w	r3, r3, #3
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d104      	bne.n	800060a <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	629a      	str	r2, [r3, #40]	; 0x28
 8000608:	e013      	b.n	8000632 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800060a:	4b67      	ldr	r3, [pc, #412]	; (80007a8 <RCC_GetClocksFreq+0x420>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0303 	and.w	r3, r3, #3
 8000612:	2b02      	cmp	r3, #2
 8000614:	d104      	bne.n	8000620 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800061c:	629a      	str	r2, [r3, #40]	; 0x28
 800061e:	e008      	b.n	8000632 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000620:	4b61      	ldr	r3, [pc, #388]	; (80007a8 <RCC_GetClocksFreq+0x420>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	f003 0303 	and.w	r3, r3, #3
 8000628:	2b03      	cmp	r3, #3
 800062a:	d102      	bne.n	8000632 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a5f      	ldr	r2, [pc, #380]	; (80007ac <RCC_GetClocksFreq+0x424>)
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000632:	4b5d      	ldr	r3, [pc, #372]	; (80007a8 <RCC_GetClocksFreq+0x420>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800063a:	2b00      	cmp	r3, #0
 800063c:	d104      	bne.n	8000648 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	689a      	ldr	r2, [r3, #8]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	62da      	str	r2, [r3, #44]	; 0x2c
 8000646:	e021      	b.n	800068c <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000648:	4b57      	ldr	r3, [pc, #348]	; (80007a8 <RCC_GetClocksFreq+0x420>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000654:	d104      	bne.n	8000660 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	62da      	str	r2, [r3, #44]	; 0x2c
 800065e:	e015      	b.n	800068c <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000660:	4b51      	ldr	r3, [pc, #324]	; (80007a8 <RCC_GetClocksFreq+0x420>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000664:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800066c:	d104      	bne.n	8000678 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
 8000676:	e009      	b.n	800068c <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000678:	4b4b      	ldr	r3, [pc, #300]	; (80007a8 <RCC_GetClocksFreq+0x420>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000680:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000684:	d102      	bne.n	800068c <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a48      	ldr	r2, [pc, #288]	; (80007ac <RCC_GetClocksFreq+0x424>)
 800068a:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 800068c:	4b46      	ldr	r3, [pc, #280]	; (80007a8 <RCC_GetClocksFreq+0x420>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000690:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000694:	2b00      	cmp	r3, #0
 8000696:	d104      	bne.n	80006a2 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	631a      	str	r2, [r3, #48]	; 0x30
 80006a0:	e021      	b.n	80006e6 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80006a2:	4b41      	ldr	r3, [pc, #260]	; (80007a8 <RCC_GetClocksFreq+0x420>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80006aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80006ae:	d104      	bne.n	80006ba <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	631a      	str	r2, [r3, #48]	; 0x30
 80006b8:	e015      	b.n	80006e6 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80006ba:	4b3b      	ldr	r3, [pc, #236]	; (80007a8 <RCC_GetClocksFreq+0x420>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80006c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80006c6:	d104      	bne.n	80006d2 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006ce:	631a      	str	r2, [r3, #48]	; 0x30
 80006d0:	e009      	b.n	80006e6 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80006d2:	4b35      	ldr	r3, [pc, #212]	; (80007a8 <RCC_GetClocksFreq+0x420>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80006da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80006de:	d102      	bne.n	80006e6 <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a32      	ldr	r2, [pc, #200]	; (80007ac <RCC_GetClocksFreq+0x424>)
 80006e4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80006e6:	4b30      	ldr	r3, [pc, #192]	; (80007a8 <RCC_GetClocksFreq+0x420>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d104      	bne.n	80006fc <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	635a      	str	r2, [r3, #52]	; 0x34
 80006fa:	e021      	b.n	8000740 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80006fc:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <RCC_GetClocksFreq+0x420>)
 80006fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000700:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000704:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000708:	d104      	bne.n	8000714 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	635a      	str	r2, [r3, #52]	; 0x34
 8000712:	e015      	b.n	8000740 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000714:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <RCC_GetClocksFreq+0x420>)
 8000716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000718:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800071c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000720:	d104      	bne.n	800072c <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000728:	635a      	str	r2, [r3, #52]	; 0x34
 800072a:	e009      	b.n	8000740 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 800072c:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <RCC_GetClocksFreq+0x420>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000730:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000734:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000738:	d102      	bne.n	8000740 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <RCC_GetClocksFreq+0x424>)
 800073e:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000740:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <RCC_GetClocksFreq+0x420>)
 8000742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000744:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000748:	2b00      	cmp	r3, #0
 800074a:	d104      	bne.n	8000756 <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	689a      	ldr	r2, [r3, #8]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000754:	e021      	b.n	800079a <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <RCC_GetClocksFreq+0x420>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800075e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000762:	d104      	bne.n	800076e <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800076c:	e015      	b.n	800079a <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <RCC_GetClocksFreq+0x420>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000776:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800077a:	d104      	bne.n	8000786 <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000782:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000784:	e009      	b.n	800079a <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <RCC_GetClocksFreq+0x420>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800078e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000792:	d102      	bne.n	800079a <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a05      	ldr	r2, [pc, #20]	; (80007ac <RCC_GetClocksFreq+0x424>)
 8000798:	639a      	str	r2, [r3, #56]	; 0x38
}
 800079a:	bf00      	nop
 800079c:	372c      	adds	r7, #44	; 0x2c
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	007a1200 	.word	0x007a1200

080007b0 <RCC_USARTCLKConfig>:
  *     @arg RCC_USARTxCLK_HSI: USART clock = HSI Clock
  *          (x can be 1, 2, 3, 4 or 5).  
  * @retval None
  */
void RCC_USARTCLKConfig(uint32_t RCC_USARTCLK)
{ 
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  tmp = (RCC_USARTCLK >> 28);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	0f1b      	lsrs	r3, r3, #28
 80007c0:	60fb      	str	r3, [r7, #12]

  /* Clear USARTSW[1:0] bit */
  switch (tmp)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	d82f      	bhi.n	800082a <RCC_USARTCLKConfig+0x7a>
 80007ca:	a201      	add	r2, pc, #4	; (adr r2, 80007d0 <RCC_USARTCLKConfig+0x20>)
 80007cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d0:	080007e5 	.word	0x080007e5
 80007d4:	080007f3 	.word	0x080007f3
 80007d8:	08000801 	.word	0x08000801
 80007dc:	0800080f 	.word	0x0800080f
 80007e0:	0800081d 	.word	0x0800081d
  {
    case 0x01:  /* clear USART1SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <RCC_USARTCLKConfig+0x94>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	4a16      	ldr	r2, [pc, #88]	; (8000844 <RCC_USARTCLKConfig+0x94>)
 80007ea:	f023 0303 	bic.w	r3, r3, #3
 80007ee:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 80007f0:	e01c      	b.n	800082c <RCC_USARTCLKConfig+0x7c>
    case 0x02:  /* clear USART2SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <RCC_USARTCLKConfig+0x94>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a13      	ldr	r2, [pc, #76]	; (8000844 <RCC_USARTCLKConfig+0x94>)
 80007f8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 80007fe:	e015      	b.n	800082c <RCC_USARTCLKConfig+0x7c>
    case 0x03:  /* clear USART3SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 8000800:	4b10      	ldr	r3, [pc, #64]	; (8000844 <RCC_USARTCLKConfig+0x94>)
 8000802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000804:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <RCC_USARTCLKConfig+0x94>)
 8000806:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800080a:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 800080c:	e00e      	b.n	800082c <RCC_USARTCLKConfig+0x7c>
    case 0x04:  /* clear UART4SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART4SW;
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <RCC_USARTCLKConfig+0x94>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <RCC_USARTCLKConfig+0x94>)
 8000814:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 800081a:	e007      	b.n	800082c <RCC_USARTCLKConfig+0x7c>
    case 0x05:  /* clear UART5SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART5SW;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <RCC_USARTCLKConfig+0x94>)
 800081e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000820:	4a08      	ldr	r2, [pc, #32]	; (8000844 <RCC_USARTCLKConfig+0x94>)
 8000822:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000826:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 8000828:	e000      	b.n	800082c <RCC_USARTCLKConfig+0x7c>
    default:
      break;
 800082a:	bf00      	nop
  }

  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <RCC_USARTCLKConfig+0x94>)
 800082e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000830:	4904      	ldr	r1, [pc, #16]	; (8000844 <RCC_USARTCLKConfig+0x94>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4313      	orrs	r3, r2
 8000836:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	40021000 	.word	0x40021000

08000848 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000854:	78fb      	ldrb	r3, [r7, #3]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d006      	beq.n	8000868 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <RCC_AHBPeriphClockCmd+0x3c>)
 800085c:	695a      	ldr	r2, [r3, #20]
 800085e:	4909      	ldr	r1, [pc, #36]	; (8000884 <RCC_AHBPeriphClockCmd+0x3c>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4313      	orrs	r3, r2
 8000864:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000866:	e006      	b.n	8000876 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <RCC_AHBPeriphClockCmd+0x3c>)
 800086a:	695a      	ldr	r2, [r3, #20]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	43db      	mvns	r3, r3
 8000870:	4904      	ldr	r1, [pc, #16]	; (8000884 <RCC_AHBPeriphClockCmd+0x3c>)
 8000872:	4013      	ands	r3, r2
 8000874:	614b      	str	r3, [r1, #20]
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000

08000888 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d006      	beq.n	80008a8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <RCC_APB1PeriphClockCmd+0x3c>)
 800089c:	69da      	ldr	r2, [r3, #28]
 800089e:	4909      	ldr	r1, [pc, #36]	; (80008c4 <RCC_APB1PeriphClockCmd+0x3c>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80008a6:	e006      	b.n	80008b6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <RCC_APB1PeriphClockCmd+0x3c>)
 80008aa:	69da      	ldr	r2, [r3, #28]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	43db      	mvns	r3, r3
 80008b0:	4904      	ldr	r1, [pc, #16]	; (80008c4 <RCC_APB1PeriphClockCmd+0x3c>)
 80008b2:	4013      	ands	r3, r2
 80008b4:	61cb      	str	r3, [r1, #28]
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b094      	sub	sp, #80	; 0x50
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80008d6:	2300      	movs	r3, #0
 80008d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80008da:	2300      	movs	r3, #0
 80008dc:	647b      	str	r3, [r7, #68]	; 0x44
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f023 0201 	bic.w	r2, r3, #1
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	647b      	str	r3, [r7, #68]	; 0x44
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80008f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008f6:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80008fe:	4313      	orrs	r3, r2
 8000900:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000906:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	647b      	str	r3, [r7, #68]	; 0x44
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800090e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000910:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000914:	f023 030c 	bic.w	r3, r3, #12
 8000918:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	691b      	ldr	r3, [r3, #16]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000928:	4313      	orrs	r3, r2
 800092a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800092c:	4313      	orrs	r3, r2
 800092e:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000934:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	647b      	str	r3, [r7, #68]	; 0x44
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800093c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800093e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000942:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800094a:	4313      	orrs	r3, r2
 800094c:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000952:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fd15 	bl	8000388 <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a33      	ldr	r2, [pc, #204]	; (8000a30 <USART_Init+0x168>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d102      	bne.n	800096c <USART_Init+0xa4>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 8000966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000968:	64bb      	str	r3, [r7, #72]	; 0x48
 800096a:	e016      	b.n	800099a <USART_Init+0xd2>
  }
  else if (USARTx == USART2)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a31      	ldr	r2, [pc, #196]	; (8000a34 <USART_Init+0x16c>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d102      	bne.n	800097a <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000976:	64bb      	str	r3, [r7, #72]	; 0x48
 8000978:	e00f      	b.n	800099a <USART_Init+0xd2>
  }
  else if (USARTx == USART3)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a2e      	ldr	r2, [pc, #184]	; (8000a38 <USART_Init+0x170>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d102      	bne.n	8000988 <USART_Init+0xc0>
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 8000982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000984:	64bb      	str	r3, [r7, #72]	; 0x48
 8000986:	e008      	b.n	800099a <USART_Init+0xd2>
  }
  else if (USARTx == UART4)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a2c      	ldr	r2, [pc, #176]	; (8000a3c <USART_Init+0x174>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d102      	bne.n	8000996 <USART_Init+0xce>
  {
    apbclock = RCC_ClocksStatus.UART4CLK_Frequency;
 8000990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000992:	64bb      	str	r3, [r7, #72]	; 0x48
 8000994:	e001      	b.n	800099a <USART_Init+0xd2>
  }
  else 
  {
    apbclock = RCC_ClocksStatus.UART5CLK_Frequency;
 8000996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000998:	64bb      	str	r3, [r7, #72]	; 0x48
  }  
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d011      	beq.n	80009ca <USART_Init+0x102>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 80009a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009a8:	005a      	lsls	r2, r3, #1
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 80009b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	6812      	ldr	r2, [r2, #0]
 80009bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80009c0:	fb01 f202 	mul.w	r2, r1, r2
 80009c4:	1a9b      	subs	r3, r3, r2
 80009c6:	647b      	str	r3, [r7, #68]	; 0x44
 80009c8:	e00e      	b.n	80009e8 <USART_Init+0x120>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80009d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80009e0:	fb01 f202 	mul.w	r2, r1, r2
 80009e4:	1a9b      	subs	r3, r3, r2
 80009e6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	085b      	lsrs	r3, r3, #1
 80009ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d302      	bcc.n	80009fa <USART_Init+0x132>
  {
    divider++;
 80009f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009f6:	3301      	adds	r3, #1
 80009f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d00b      	beq.n	8000a1e <USART_Init+0x156>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000a10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a12:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000a16:	4013      	ands	r3, r2
 8000a18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8000a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	819a      	strh	r2, [r3, #12]
}
 8000a26:	bf00      	nop
 8000a28:	3750      	adds	r7, #80	; 0x50
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40013800 	.word	0x40013800
 8000a34:	40004400 	.word	0x40004400
 8000a38:	40004800 	.word	0x40004800
 8000a3c:	40004c00 	.word	0x40004c00

08000a40 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a4c:	78fb      	ldrb	r3, [r7, #3]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d006      	beq.n	8000a60 <USART_Cmd+0x20>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f043 0201 	orr.w	r2, r3, #1
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  }
}
 8000a5e:	e005      	b.n	8000a6c <USART_Cmd+0x2c>
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f023 0201 	bic.w	r2, r3, #1
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	460b      	mov	r3, r1
 8000a82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000a84:	887b      	ldrh	r3, [r7, #2]
 8000a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	0a1b      	lsrs	r3, r3, #8
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d103      	bne.n	8000ae6 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	61fb      	str	r3, [r7, #28]
 8000ae4:	e005      	b.n	8000af2 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	2b03      	cmp	r3, #3
 8000aea:	d102      	bne.n	8000af2 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	3308      	adds	r3, #8
 8000af0:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d006      	beq.n	8000b06 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	6819      	ldr	r1, [r3, #0]
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	430a      	orrs	r2, r1
 8000b02:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000b04:	e006      	b.n	8000b14 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	6819      	ldr	r1, [r3, #0]
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	43da      	mvns	r2, r3
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	400a      	ands	r2, r1
 8000b12:	601a      	str	r2, [r3, #0]
}
 8000b14:	bf00      	nop
 8000b16:	3724      	adds	r7, #36	; 0x24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	69da      	ldr	r2, [r3, #28]
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	4013      	ands	r3, r2
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d002      	beq.n	8000b40 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	73fb      	strb	r3, [r7, #15]
 8000b3e:	e001      	b.n	8000b44 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000b40:	2300      	movs	r3, #0
 8000b42:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b087      	sub	sp, #28
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d105      	bne.n	8000b98 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	4013      	ands	r3, r2
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e00d      	b.n	8000bb4 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d105      	bne.n	8000baa <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	e004      	b.n	8000bb4 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	0c1b      	lsrs	r3, r3, #16
 8000bb8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000bba:	2201      	movs	r2, #1
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d005      	beq.n	8000be0 <USART_GetITStatus+0x8e>
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d002      	beq.n	8000be0 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	74fb      	strb	r3, [r7, #19]
 8000bde:	e001      	b.n	8000be4 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000be4:	7cfb      	ldrb	r3, [r7, #19]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	371c      	adds	r7, #28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f003 031f 	and.w	r3, r3, #31
 8000c04:	2201      	movs	r2, #1
 8000c06:	fa02 f103 	lsl.w	r1, r2, r3
 8000c0a:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <NVIC_EnableIRQ+0x30>)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	095b      	lsrs	r3, r3, #5
 8000c12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	4619      	mov	r1, r3
 8000c38:	4807      	ldr	r0, [pc, #28]	; (8000c58 <uart_put_char+0x30>)
 8000c3a:	f7ff ff1d 	bl	8000a78 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8000c3e:	bf00      	nop
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <uart_put_char+0x30>)
 8000c44:	f7ff ff6c 	bl	8000b20 <USART_GetFlagStatus>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d0f8      	beq.n	8000c40 <uart_put_char+0x18>
}
 8000c4e:	bf00      	nop
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40004400 	.word	0x40004400

08000c5c <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
 8000c68:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	e012      	b.n	8000c96 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b0a      	cmp	r3, #10
 8000c7a:	d102      	bne.n	8000c82 <_write_r+0x26>
            uart_put_char('\r');
 8000c7c:	200d      	movs	r0, #13
 8000c7e:	f7ff ffd3 	bl	8000c28 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	4413      	add	r3, r2
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ffcc 	bl	8000c28 <uart_put_char>
    for (n = 0; n < len; n++) {
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	3301      	adds	r3, #1
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	697a      	ldr	r2, [r7, #20]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	dbe8      	blt.n	8000c70 <_write_r+0x14>
    }

    return len;
 8000c9e:	683b      	ldr	r3, [r7, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000cac:	4915      	ldr	r1, [pc, #84]	; (8000d04 <USART2_IRQHandler+0x5c>)
 8000cae:	4816      	ldr	r0, [pc, #88]	; (8000d08 <USART2_IRQHandler+0x60>)
 8000cb0:	f7ff ff4f 	bl	8000b52 <USART_GetITStatus>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d021      	beq.n	8000cfe <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <USART2_IRQHandler+0x60>)
 8000cbc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000cbe:	b299      	uxth	r1, r3
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <USART2_IRQHandler+0x64>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	b2d0      	uxtb	r0, r2
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <USART2_IRQHandler+0x64>)
 8000ccc:	7010      	strb	r0, [r2, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	b2c9      	uxtb	r1, r1
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <USART2_IRQHandler+0x68>)
 8000cd4:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <USART2_IRQHandler+0x6c>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2bff      	cmp	r3, #255	; 0xff
 8000cde:	d107      	bne.n	8000cf0 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <USART2_IRQHandler+0x70>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <USART2_IRQHandler+0x70>)
 8000cec:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000cee:	e006      	b.n	8000cfe <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <USART2_IRQHandler+0x6c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <USART2_IRQHandler+0x6c>)
 8000cfc:	701a      	strb	r2, [r3, #0]
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	00050105 	.word	0x00050105
 8000d08:	40004400 	.word	0x40004400
 8000d0c:	200001b0 	.word	0x200001b0
 8000d10:	200000b0 	.word	0x200000b0
 8000d14:	200001b2 	.word	0x200001b2
 8000d18:	200001b1 	.word	0x200001b1

08000d1c <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b094      	sub	sp, #80	; 0x50
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000d24:	4b86      	ldr	r3, [pc, #536]	; (8000f40 <uart_init+0x224>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 fb97 	bl	8001460 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000d32:	4b83      	ldr	r3, [pc, #524]	; (8000f40 <uart_init+0x224>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 fb90 	bl	8001460 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000d40:	4b80      	ldr	r3, [pc, #512]	; (8000f44 <uart_init+0x228>)
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	4a7f      	ldr	r2, [pc, #508]	; (8000f44 <uart_init+0x228>)
 8000d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000d4c:	4b7d      	ldr	r3, [pc, #500]	; (8000f44 <uart_init+0x228>)
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	4a7c      	ldr	r2, [pc, #496]	; (8000f44 <uart_init+0x228>)
 8000d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d56:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000d58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d5c:	6a1b      	ldr	r3, [r3, #32]
 8000d5e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d66:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000d68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d6c:	6a1b      	ldr	r3, [r3, #32]
 8000d6e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d76:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000d78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d7c:	6a1b      	ldr	r3, [r3, #32]
 8000d7e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000d86:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000d88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d8c:	6a1b      	ldr	r3, [r3, #32]
 8000d8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d92:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000d96:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000d98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000da2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000da6:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000da8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000db2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000db6:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000db8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dbc:	889b      	ldrh	r3, [r3, #4]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000dc4:	f023 030c 	bic.w	r3, r3, #12
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000dcc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000dd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dd4:	8892      	ldrh	r2, [r2, #4]
 8000dd6:	b292      	uxth	r2, r2
 8000dd8:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000dda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000de4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000de8:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000dea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000df4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000df8:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000dfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e08:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000e0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e14:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000e18:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000e1a:	4b4b      	ldr	r3, [pc, #300]	; (8000f48 <uart_init+0x22c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a4a      	ldr	r2, [pc, #296]	; (8000f48 <uart_init+0x22c>)
 8000e20:	f023 0301 	bic.w	r3, r3, #1
 8000e24:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000e26:	4b48      	ldr	r3, [pc, #288]	; (8000f48 <uart_init+0x22c>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	4a47      	ldr	r2, [pc, #284]	; (8000f48 <uart_init+0x22c>)
 8000e2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e30:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000e32:	4b45      	ldr	r3, [pc, #276]	; (8000f48 <uart_init+0x22c>)
 8000e34:	4a44      	ldr	r2, [pc, #272]	; (8000f48 <uart_init+0x22c>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000e3a:	4b43      	ldr	r3, [pc, #268]	; (8000f48 <uart_init+0x22c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a42      	ldr	r2, [pc, #264]	; (8000f48 <uart_init+0x22c>)
 8000e40:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000e44:	f023 030c 	bic.w	r3, r3, #12
 8000e48:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000e4a:	4b3f      	ldr	r3, [pc, #252]	; (8000f48 <uart_init+0x22c>)
 8000e4c:	4a3e      	ldr	r2, [pc, #248]	; (8000f48 <uart_init+0x22c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000e52:	4b3d      	ldr	r3, [pc, #244]	; (8000f48 <uart_init+0x22c>)
 8000e54:	4a3c      	ldr	r2, [pc, #240]	; (8000f48 <uart_init+0x22c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000e5a:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <uart_init+0x22c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a3a      	ldr	r2, [pc, #232]	; (8000f48 <uart_init+0x22c>)
 8000e60:	f043 030c 	orr.w	r3, r3, #12
 8000e64:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000e66:	4b38      	ldr	r3, [pc, #224]	; (8000f48 <uart_init+0x22c>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	4a37      	ldr	r2, [pc, #220]	; (8000f48 <uart_init+0x22c>)
 8000e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e70:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000e72:	4b35      	ldr	r3, [pc, #212]	; (8000f48 <uart_init+0x22c>)
 8000e74:	4a34      	ldr	r2, [pc, #208]	; (8000f48 <uart_init+0x22c>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e7e:	2300      	movs	r3, #0
 8000e80:	647b      	str	r3, [r7, #68]	; 0x44
 8000e82:	2300      	movs	r3, #0
 8000e84:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fa7c 	bl	8000388 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e92:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000e94:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <uart_init+0x22c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d010      	beq.n	8000ec2 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ea2:	005a      	lsls	r2, r3, #1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	fb01 f202 	mul.w	r2, r1, r2
 8000ebc:	1a9b      	subs	r3, r3, r2
 8000ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ec0:	e00d      	b.n	8000ede <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ed4:	6879      	ldr	r1, [r7, #4]
 8000ed6:	fb01 f202 	mul.w	r2, r1, r2
 8000eda:	1a9b      	subs	r3, r3, r2
 8000edc:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	085b      	lsrs	r3, r3, #1
 8000ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d302      	bcc.n	8000eee <uart_init+0x1d2>
        divider++;
 8000ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eea:	3301      	adds	r3, #1
 8000eec:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <uart_init+0x22c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d00b      	beq.n	8000f12 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000efc:	085b      	lsrs	r3, r3, #1
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000f04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f06:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <uart_init+0x22c>)
 8000f14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f16:	b292      	uxth	r2, r2
 8000f18:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <uart_init+0x22c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <uart_init+0x22c>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000f26:	2201      	movs	r2, #1
 8000f28:	4908      	ldr	r1, [pc, #32]	; (8000f4c <uart_init+0x230>)
 8000f2a:	4807      	ldr	r0, [pc, #28]	; (8000f48 <uart_init+0x22c>)
 8000f2c:	f7ff fdb6 	bl	8000a9c <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000f30:	2026      	movs	r0, #38	; 0x26
 8000f32:	f7ff fe5f 	bl	8000bf4 <NVIC_EnableIRQ>
}
 8000f36:	bf00      	nop
 8000f38:	3750      	adds	r7, #80	; 0x50
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000030 	.word	0x20000030
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40004400 	.word	0x40004400
 8000f4c:	00050105 	.word	0x00050105

08000f50 <sysTickDelay>:

/**
 * Systick based us delay function
 */
void sysTickDelay(int delay)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	pSysTick->RVR = 64000;	//Sets the reload value - setup for delay in ms
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <sysTickDelay+0x58>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000f60:	605a      	str	r2, [r3, #4]
	pSysTick->CVR= 0;		//Clears the SysTick current value register
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <sysTickDelay+0x58>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
	pSysTick->CSR= (1 << 0) | (1 << 2); 	//Enable SysTick in the control register and select internal system clock source
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <sysTickDelay+0x58>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2205      	movs	r2, #5
 8000f70:	601a      	str	r2, [r3, #0]
	for(int i=delay; i > 0; i--)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	e00a      	b.n	8000f8e <sysTickDelay+0x3e>
	{
		while(!(pSysTick->CSR & (1 << 16)));
 8000f78:	bf00      	nop
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <sysTickDelay+0x58>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f8      	beq.n	8000f7a <sysTickDelay+0x2a>
	for(int i=delay; i > 0; i--)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	dcf1      	bgt.n	8000f78 <sysTickDelay+0x28>
	}
	pSysTick->CSR=0; 		//Disable SysTick counter in the Control Register
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <sysTickDelay+0x58>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	2000002c 	.word	0x2000002c

08000fac <openlog_init>:

/**
 * Setup UART3 to be used for the OpenLog
 */
void openlog_init()
{
 8000fac:	b5b0      	push	{r4, r5, r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
	RCC_USARTCLKConfig(RCC_USART3CLK_PCLK);
 8000fb2:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000fb6:	f7ff fbfb 	bl	80007b0 <RCC_USARTCLKConfig>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000fba:	2101      	movs	r1, #1
 8000fbc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000fc0:	f7ff fc42 	bl	8000848 <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000fca:	f7ff fc5d 	bl	8000888 <RCC_APB1PeriphClockCmd>

	// PB9 USART3_TX (Datasheet table 14)
	GPIO_InitTypeDef GPIO_cfg = {
 8000fce:	4a1b      	ldr	r2, [pc, #108]	; (800103c <openlog_init+0x90>)
 8000fd0:	f107 0318 	add.w	r3, r7, #24
 8000fd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fd8:	e883 0003 	stmia.w	r3, {r0, r1}
			.GPIO_Mode = GPIO_Mode_AF,
			.GPIO_Speed = GPIO_Speed_10MHz,
			.GPIO_PuPd = GPIO_PuPd_UP,
			.GPIO_OType = GPIO_OType_PP,
	};
	GPIO_Init(GPIOB, &GPIO_cfg);
 8000fdc:	f107 0318 	add.w	r3, r7, #24
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4817      	ldr	r0, [pc, #92]	; (8001040 <openlog_init+0x94>)
 8000fe4:	f7ff f8f0 	bl	80001c8 <GPIO_Init>

	// PB11 USART3_RX (Datasheet table 14)
	GPIO_cfg.GPIO_Pin = GPIO_Pin_11;
 8000fe8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fec:	61bb      	str	r3, [r7, #24]
	GPIO_Init(GPIOB, &GPIO_cfg);
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4812      	ldr	r0, [pc, #72]	; (8001040 <openlog_init+0x94>)
 8000ff6:	f7ff f8e7 	bl	80001c8 <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_7);
 8000ffa:	2207      	movs	r2, #7
 8000ffc:	2109      	movs	r1, #9
 8000ffe:	4810      	ldr	r0, [pc, #64]	; (8001040 <openlog_init+0x94>)
 8001000:	f7ff f978 	bl	80002f4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_7);
 8001004:	2207      	movs	r2, #7
 8001006:	210b      	movs	r1, #11
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <openlog_init+0x94>)
 800100a:	f7ff f973 	bl	80002f4 <GPIO_PinAFConfig>

	/*  OpenLog UART */
	USART_InitTypeDef uart_cfg = {
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <openlog_init+0x98>)
 8001010:	463c      	mov	r4, r7
 8001012:	461d      	mov	r5, r3
 8001014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001018:	e895 0003 	ldmia.w	r5, {r0, r1}
 800101c:	e884 0003 	stmia.w	r4, {r0, r1}
			.USART_StopBits = USART_StopBits_1,
			.USART_Parity = USART_Parity_No,
			.USART_Mode = USART_Mode_Tx | USART_Mode_Rx,
			.USART_HardwareFlowControl = USART_HardwareFlowControl_None,
	};
	USART_Init(USART3, &uart_cfg);
 8001020:	463b      	mov	r3, r7
 8001022:	4619      	mov	r1, r3
 8001024:	4808      	ldr	r0, [pc, #32]	; (8001048 <openlog_init+0x9c>)
 8001026:	f7ff fc4f 	bl	80008c8 <USART_Init>
	USART_Cmd(USART3, ENABLE);
 800102a:	2101      	movs	r1, #1
 800102c:	4806      	ldr	r0, [pc, #24]	; (8001048 <openlog_init+0x9c>)
 800102e:	f7ff fd07 	bl	8000a40 <USART_Cmd>
}
 8001032:	bf00      	nop
 8001034:	3720      	adds	r7, #32
 8001036:	46bd      	mov	sp, r7
 8001038:	bdb0      	pop	{r4, r5, r7, pc}
 800103a:	bf00      	nop
 800103c:	08001cf0 	.word	0x08001cf0
 8001040:	48000400 	.word	0x48000400
 8001044:	08001cf8 	.word	0x08001cf8
 8001048:	40004800 	.word	0x40004800

0800104c <uart_write_char>:

/**
 * Write one character to the OpenLog
 */
void uart_write_char(char c) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART3, (uint8_t)c);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	b29b      	uxth	r3, r3
 800105a:	4619      	mov	r1, r3
 800105c:	4808      	ldr	r0, [pc, #32]	; (8001080 <uart_write_char+0x34>)
 800105e:	f7ff fd0b 	bl	8000a78 <USART_SendData>
    while(USART_GetFlagStatus(USART3, USART_FLAG_TXE)  == RESET){}
 8001062:	bf00      	nop
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <uart_write_char+0x34>)
 8001068:	f7ff fd5a 	bl	8000b20 <USART_GetFlagStatus>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f8      	beq.n	8001064 <uart_write_char+0x18>
    sysTickDelay(10);
 8001072:	200a      	movs	r0, #10
 8001074:	f7ff ff6c 	bl	8000f50 <sysTickDelay>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40004800 	.word	0x40004800

08001084 <openlog_cmd_mode>:

/**
 * OpenLog Commandmode
 */
void openlog_cmd_mode() {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    USART_SendData(USART3, 0x1A);
 8001088:	211a      	movs	r1, #26
 800108a:	4814      	ldr	r0, [pc, #80]	; (80010dc <openlog_cmd_mode+0x58>)
 800108c:	f7ff fcf4 	bl	8000a78 <USART_SendData>
    while(USART_GetFlagStatus(USART3, USART_FLAG_TXE)  == RESET){}
 8001090:	bf00      	nop
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	4811      	ldr	r0, [pc, #68]	; (80010dc <openlog_cmd_mode+0x58>)
 8001096:	f7ff fd43 	bl	8000b20 <USART_GetFlagStatus>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0f8      	beq.n	8001092 <openlog_cmd_mode+0xe>
    USART_SendData(USART3, 0x1A);
 80010a0:	211a      	movs	r1, #26
 80010a2:	480e      	ldr	r0, [pc, #56]	; (80010dc <openlog_cmd_mode+0x58>)
 80010a4:	f7ff fce8 	bl	8000a78 <USART_SendData>
    while(USART_GetFlagStatus(USART3, USART_FLAG_TXE)  == RESET){}
 80010a8:	bf00      	nop
 80010aa:	2180      	movs	r1, #128	; 0x80
 80010ac:	480b      	ldr	r0, [pc, #44]	; (80010dc <openlog_cmd_mode+0x58>)
 80010ae:	f7ff fd37 	bl	8000b20 <USART_GetFlagStatus>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f8      	beq.n	80010aa <openlog_cmd_mode+0x26>
    USART_SendData(USART3, 0x1A);
 80010b8:	211a      	movs	r1, #26
 80010ba:	4808      	ldr	r0, [pc, #32]	; (80010dc <openlog_cmd_mode+0x58>)
 80010bc:	f7ff fcdc 	bl	8000a78 <USART_SendData>
    while(USART_GetFlagStatus(USART3, USART_FLAG_TXE)  == RESET){}
 80010c0:	bf00      	nop
 80010c2:	2180      	movs	r1, #128	; 0x80
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <openlog_cmd_mode+0x58>)
 80010c6:	f7ff fd2b 	bl	8000b20 <USART_GetFlagStatus>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0f8      	beq.n	80010c2 <openlog_cmd_mode+0x3e>
    sysTickDelay(2000);
 80010d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010d4:	f7ff ff3c 	bl	8000f50 <sysTickDelay>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40004800 	.word	0x40004800

080010e0 <openlog_write_str>:

/**
 * Write a null terminated string to OpenLog
 */
void openlog_write_str(char* string)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	char* p = string;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	60fb      	str	r3, [r7, #12]
	while(*p != '\0') {
 80010ec:	e007      	b.n	80010fe <openlog_write_str+0x1e>
		uart_write_char(*p);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ffaa 	bl	800104c <uart_write_char>
		p++;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
	while(*p != '\0') {
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f3      	bne.n	80010ee <openlog_write_str+0xe>
//		sysTickDelay(10);
	}
	uart_write_char('\r');
 8001106:	200d      	movs	r0, #13
 8001108:	f7ff ffa0 	bl	800104c <uart_write_char>
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <main>:

int main(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	uart_init(9600);
 8001118:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800111c:	f7ff fdfe 	bl	8000d1c <uart_init>
	openlog_init();
 8001120:	f7ff ff44 	bl	8000fac <openlog_init>
	sysTickDelay(2000);
 8001124:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001128:	f7ff ff12 	bl	8000f50 <sysTickDelay>

	openlog_cmd_mode();
 800112c:	f7ff ffaa 	bl	8001084 <openlog_cmd_mode>
	openlog_write_str("new file1.txt");
 8001130:	4813      	ldr	r0, [pc, #76]	; (8001180 <main+0x6c>)
 8001132:	f7ff ffd5 	bl	80010e0 <openlog_write_str>
	openlog_write_str("append file1.txt");
 8001136:	4813      	ldr	r0, [pc, #76]	; (8001184 <main+0x70>)
 8001138:	f7ff ffd2 	bl	80010e0 <openlog_write_str>
	openlog_write_str("This is a test, writing in file1.txt");
 800113c:	4812      	ldr	r0, [pc, #72]	; (8001188 <main+0x74>)
 800113e:	f7ff ffcf 	bl	80010e0 <openlog_write_str>
	sysTickDelay(1000);
 8001142:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001146:	f7ff ff03 	bl	8000f50 <sysTickDelay>
	openlog_cmd_mode();
 800114a:	f7ff ff9b 	bl	8001084 <openlog_cmd_mode>
	openlog_write_str("new file2.txt");
 800114e:	480f      	ldr	r0, [pc, #60]	; (800118c <main+0x78>)
 8001150:	f7ff ffc6 	bl	80010e0 <openlog_write_str>
	openlog_write_str("append file2.txt");
 8001154:	480e      	ldr	r0, [pc, #56]	; (8001190 <main+0x7c>)
 8001156:	f7ff ffc3 	bl	80010e0 <openlog_write_str>
	openlog_write_str("This is a test, writing in file2.txt");
 800115a:	480e      	ldr	r0, [pc, #56]	; (8001194 <main+0x80>)
 800115c:	f7ff ffc0 	bl	80010e0 <openlog_write_str>
	sysTickDelay(1000);
 8001160:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001164:	f7ff fef4 	bl	8000f50 <sysTickDelay>
	openlog_cmd_mode();
 8001168:	f7ff ff8c 	bl	8001084 <openlog_cmd_mode>
	openlog_write_str("append file1.txt");
 800116c:	4805      	ldr	r0, [pc, #20]	; (8001184 <main+0x70>)
 800116e:	f7ff ffb7 	bl	80010e0 <openlog_write_str>
	sysTickDelay(100);
 8001172:	2064      	movs	r0, #100	; 0x64
 8001174:	f7ff feec 	bl	8000f50 <sysTickDelay>
	openlog_write_str("And now we are writing some more in file1.txt");
 8001178:	4807      	ldr	r0, [pc, #28]	; (8001198 <main+0x84>)
 800117a:	f7ff ffb1 	bl	80010e0 <openlog_write_str>

	while(1){
 800117e:	e7fe      	b.n	800117e <main+0x6a>
 8001180:	08001d10 	.word	0x08001d10
 8001184:	08001d20 	.word	0x08001d20
 8001188:	08001d34 	.word	0x08001d34
 800118c:	08001d5c 	.word	0x08001d5c
 8001190:	08001d6c 	.word	0x08001d6c
 8001194:	08001d80 	.word	0x08001d80
 8001198:	08001da8 	.word	0x08001da8

0800119c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	e00a      	b.n	80011c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011ae:	f3af 8000 	nop.w
 80011b2:	4601      	mov	r1, r0
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	60ba      	str	r2, [r7, #8]
 80011ba:	b2ca      	uxtb	r2, r1
 80011bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3301      	adds	r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	dbf0      	blt.n	80011ae <_read+0x12>
	}

return len;
 80011cc:	687b      	ldr	r3, [r7, #4]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
	return -1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 800120e:	b480      	push	{r7}
 8001210:	b085      	sub	sp, #20
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
	return 0;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <_sbrk+0x50>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <_sbrk+0x16>
		heap_end = &end;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <_sbrk+0x50>)
 800123a:	4a10      	ldr	r2, [pc, #64]	; (800127c <_sbrk+0x54>)
 800123c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <_sbrk+0x50>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <_sbrk+0x50>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	466a      	mov	r2, sp
 800124e:	4293      	cmp	r3, r2
 8001250:	d907      	bls.n	8001262 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001252:	f000 f8d3 	bl	80013fc <__errno>
 8001256:	4603      	mov	r3, r0
 8001258:	220c      	movs	r2, #12
 800125a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800125c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001260:	e006      	b.n	8001270 <_sbrk+0x48>
	}

	heap_end += incr;
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <_sbrk+0x50>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	4a03      	ldr	r2, [pc, #12]	; (8001278 <_sbrk+0x50>)
 800126c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200001b4 	.word	0x200001b4
 800127c:	200001c8 	.word	0x200001c8

08001280 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <SystemInit+0x84>)
 8001286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128a:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <SystemInit+0x84>)
 800128c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <SystemInit+0x88>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a1b      	ldr	r2, [pc, #108]	; (8001308 <SystemInit+0x88>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <SystemInit+0x88>)
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	4918      	ldr	r1, [pc, #96]	; (8001308 <SystemInit+0x88>)
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <SystemInit+0x8c>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <SystemInit+0x88>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a15      	ldr	r2, [pc, #84]	; (8001308 <SystemInit+0x88>)
 80012b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80012b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <SystemInit+0x88>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a11      	ldr	r2, [pc, #68]	; (8001308 <SystemInit+0x88>)
 80012c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <SystemInit+0x88>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <SystemInit+0x88>)
 80012ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80012d2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <SystemInit+0x88>)
 80012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d8:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <SystemInit+0x88>)
 80012da:	f023 030f 	bic.w	r3, r3, #15
 80012de:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <SystemInit+0x88>)
 80012e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012e4:	4908      	ldr	r1, [pc, #32]	; (8001308 <SystemInit+0x88>)
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <SystemInit+0x90>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <SystemInit+0x88>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80012f2:	f000 f80f 	bl	8001314 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012f6:	4b03      	ldr	r3, [pc, #12]	; (8001304 <SystemInit+0x84>)
 80012f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012fc:	609a      	str	r2, [r3, #8]
#endif  
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00
 8001308:	40021000 	.word	0x40021000
 800130c:	f87fc00c 	.word	0xf87fc00c
 8001310:	ff00fccc 	.word	0xff00fccc

08001314 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001318:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <SetSysClock+0x8c>)
 800131a:	2212      	movs	r2, #18
 800131c:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <SetSysClock+0x90>)
 8001320:	4a20      	ldr	r2, [pc, #128]	; (80013a4 <SetSysClock+0x90>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001326:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <SetSysClock+0x90>)
 8001328:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <SetSysClock+0x90>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <SetSysClock+0x90>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4a1c      	ldr	r2, [pc, #112]	; (80013a4 <SetSysClock+0x90>)
 8001334:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001338:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <SetSysClock+0x90>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <SetSysClock+0x90>)
 8001340:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001344:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <SetSysClock+0x90>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	4a16      	ldr	r2, [pc, #88]	; (80013a4 <SetSysClock+0x90>)
 800134c:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8001350:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <SetSysClock+0x90>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a13      	ldr	r2, [pc, #76]	; (80013a4 <SetSysClock+0x90>)
 8001358:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800135c:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800135e:	bf00      	nop
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <SetSysClock+0x90>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f9      	beq.n	8001360 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <SetSysClock+0x90>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <SetSysClock+0x90>)
 8001372:	f023 0303 	bic.w	r3, r3, #3
 8001376:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <SetSysClock+0x90>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <SetSysClock+0x90>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001384:	bf00      	nop
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <SetSysClock+0x90>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b08      	cmp	r3, #8
 8001390:	d1f9      	bne.n	8001386 <SetSysClock+0x72>
  {
  }
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40022000 	.word	0x40022000
 80013a4:	40021000 	.word	0x40021000

080013a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013ae:	490e      	ldr	r1, [pc, #56]	; (80013e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <LoopForever+0xe>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c4:	4c0b      	ldr	r4, [pc, #44]	; (80013f4 <LoopForever+0x16>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80013d2:	f7ff ff55 	bl	8001280 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80013d6:	f000 f817 	bl	8001408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013da:	f7ff fe9b 	bl	8001114 <main>

080013de <LoopForever>:

LoopForever:
    b LoopForever
 80013de:	e7fe      	b.n	80013de <LoopForever>
  ldr   r0, =_estack
 80013e0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80013ec:	08001e44 	.word	0x08001e44
  ldr r2, =_sbss
 80013f0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80013f4:	200001c8 	.word	0x200001c8

080013f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC1_2_IRQHandler>
	...

080013fc <__errno>:
 80013fc:	4b01      	ldr	r3, [pc, #4]	; (8001404 <__errno+0x8>)
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000030 	.word	0x20000030

08001408 <__libc_init_array>:
 8001408:	b570      	push	{r4, r5, r6, lr}
 800140a:	4d0d      	ldr	r5, [pc, #52]	; (8001440 <__libc_init_array+0x38>)
 800140c:	4c0d      	ldr	r4, [pc, #52]	; (8001444 <__libc_init_array+0x3c>)
 800140e:	1b64      	subs	r4, r4, r5
 8001410:	10a4      	asrs	r4, r4, #2
 8001412:	2600      	movs	r6, #0
 8001414:	42a6      	cmp	r6, r4
 8001416:	d109      	bne.n	800142c <__libc_init_array+0x24>
 8001418:	4d0b      	ldr	r5, [pc, #44]	; (8001448 <__libc_init_array+0x40>)
 800141a:	4c0c      	ldr	r4, [pc, #48]	; (800144c <__libc_init_array+0x44>)
 800141c:	f000 fc5c 	bl	8001cd8 <_init>
 8001420:	1b64      	subs	r4, r4, r5
 8001422:	10a4      	asrs	r4, r4, #2
 8001424:	2600      	movs	r6, #0
 8001426:	42a6      	cmp	r6, r4
 8001428:	d105      	bne.n	8001436 <__libc_init_array+0x2e>
 800142a:	bd70      	pop	{r4, r5, r6, pc}
 800142c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001430:	4798      	blx	r3
 8001432:	3601      	adds	r6, #1
 8001434:	e7ee      	b.n	8001414 <__libc_init_array+0xc>
 8001436:	f855 3b04 	ldr.w	r3, [r5], #4
 800143a:	4798      	blx	r3
 800143c:	3601      	adds	r6, #1
 800143e:	e7f2      	b.n	8001426 <__libc_init_array+0x1e>
 8001440:	08001e3c 	.word	0x08001e3c
 8001444:	08001e3c 	.word	0x08001e3c
 8001448:	08001e3c 	.word	0x08001e3c
 800144c:	08001e40 	.word	0x08001e40

08001450 <memset>:
 8001450:	4402      	add	r2, r0
 8001452:	4603      	mov	r3, r0
 8001454:	4293      	cmp	r3, r2
 8001456:	d100      	bne.n	800145a <memset+0xa>
 8001458:	4770      	bx	lr
 800145a:	f803 1b01 	strb.w	r1, [r3], #1
 800145e:	e7f9      	b.n	8001454 <memset+0x4>

08001460 <setbuf>:
 8001460:	2900      	cmp	r1, #0
 8001462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001466:	bf0c      	ite	eq
 8001468:	2202      	moveq	r2, #2
 800146a:	2200      	movne	r2, #0
 800146c:	f000 b800 	b.w	8001470 <setvbuf>

08001470 <setvbuf>:
 8001470:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001474:	461d      	mov	r5, r3
 8001476:	4b5d      	ldr	r3, [pc, #372]	; (80015ec <setvbuf+0x17c>)
 8001478:	681f      	ldr	r7, [r3, #0]
 800147a:	4604      	mov	r4, r0
 800147c:	460e      	mov	r6, r1
 800147e:	4690      	mov	r8, r2
 8001480:	b127      	cbz	r7, 800148c <setvbuf+0x1c>
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	b913      	cbnz	r3, 800148c <setvbuf+0x1c>
 8001486:	4638      	mov	r0, r7
 8001488:	f000 f9d2 	bl	8001830 <__sinit>
 800148c:	4b58      	ldr	r3, [pc, #352]	; (80015f0 <setvbuf+0x180>)
 800148e:	429c      	cmp	r4, r3
 8001490:	d167      	bne.n	8001562 <setvbuf+0xf2>
 8001492:	687c      	ldr	r4, [r7, #4]
 8001494:	f1b8 0f02 	cmp.w	r8, #2
 8001498:	d006      	beq.n	80014a8 <setvbuf+0x38>
 800149a:	f1b8 0f01 	cmp.w	r8, #1
 800149e:	f200 809f 	bhi.w	80015e0 <setvbuf+0x170>
 80014a2:	2d00      	cmp	r5, #0
 80014a4:	f2c0 809c 	blt.w	80015e0 <setvbuf+0x170>
 80014a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014aa:	07db      	lsls	r3, r3, #31
 80014ac:	d405      	bmi.n	80014ba <setvbuf+0x4a>
 80014ae:	89a3      	ldrh	r3, [r4, #12]
 80014b0:	0598      	lsls	r0, r3, #22
 80014b2:	d402      	bmi.n	80014ba <setvbuf+0x4a>
 80014b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014b6:	f000 fa59 	bl	800196c <__retarget_lock_acquire_recursive>
 80014ba:	4621      	mov	r1, r4
 80014bc:	4638      	mov	r0, r7
 80014be:	f000 f923 	bl	8001708 <_fflush_r>
 80014c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014c4:	b141      	cbz	r1, 80014d8 <setvbuf+0x68>
 80014c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014ca:	4299      	cmp	r1, r3
 80014cc:	d002      	beq.n	80014d4 <setvbuf+0x64>
 80014ce:	4638      	mov	r0, r7
 80014d0:	f000 fa7c 	bl	80019cc <_free_r>
 80014d4:	2300      	movs	r3, #0
 80014d6:	6363      	str	r3, [r4, #52]	; 0x34
 80014d8:	2300      	movs	r3, #0
 80014da:	61a3      	str	r3, [r4, #24]
 80014dc:	6063      	str	r3, [r4, #4]
 80014de:	89a3      	ldrh	r3, [r4, #12]
 80014e0:	0619      	lsls	r1, r3, #24
 80014e2:	d503      	bpl.n	80014ec <setvbuf+0x7c>
 80014e4:	6921      	ldr	r1, [r4, #16]
 80014e6:	4638      	mov	r0, r7
 80014e8:	f000 fa70 	bl	80019cc <_free_r>
 80014ec:	89a3      	ldrh	r3, [r4, #12]
 80014ee:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80014f2:	f023 0303 	bic.w	r3, r3, #3
 80014f6:	f1b8 0f02 	cmp.w	r8, #2
 80014fa:	81a3      	strh	r3, [r4, #12]
 80014fc:	d06c      	beq.n	80015d8 <setvbuf+0x168>
 80014fe:	ab01      	add	r3, sp, #4
 8001500:	466a      	mov	r2, sp
 8001502:	4621      	mov	r1, r4
 8001504:	4638      	mov	r0, r7
 8001506:	f000 fa33 	bl	8001970 <__swhatbuf_r>
 800150a:	89a3      	ldrh	r3, [r4, #12]
 800150c:	4318      	orrs	r0, r3
 800150e:	81a0      	strh	r0, [r4, #12]
 8001510:	2d00      	cmp	r5, #0
 8001512:	d130      	bne.n	8001576 <setvbuf+0x106>
 8001514:	9d00      	ldr	r5, [sp, #0]
 8001516:	4628      	mov	r0, r5
 8001518:	f000 fa50 	bl	80019bc <malloc>
 800151c:	4606      	mov	r6, r0
 800151e:	2800      	cmp	r0, #0
 8001520:	d155      	bne.n	80015ce <setvbuf+0x15e>
 8001522:	f8dd 9000 	ldr.w	r9, [sp]
 8001526:	45a9      	cmp	r9, r5
 8001528:	d14a      	bne.n	80015c0 <setvbuf+0x150>
 800152a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800152e:	2200      	movs	r2, #0
 8001530:	60a2      	str	r2, [r4, #8]
 8001532:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001536:	6022      	str	r2, [r4, #0]
 8001538:	6122      	str	r2, [r4, #16]
 800153a:	2201      	movs	r2, #1
 800153c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001540:	6162      	str	r2, [r4, #20]
 8001542:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	07d2      	lsls	r2, r2, #31
 800154a:	81a3      	strh	r3, [r4, #12]
 800154c:	d405      	bmi.n	800155a <setvbuf+0xea>
 800154e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001552:	d102      	bne.n	800155a <setvbuf+0xea>
 8001554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001556:	f000 fa0a 	bl	800196e <__retarget_lock_release_recursive>
 800155a:	4628      	mov	r0, r5
 800155c:	b003      	add	sp, #12
 800155e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <setvbuf+0x184>)
 8001564:	429c      	cmp	r4, r3
 8001566:	d101      	bne.n	800156c <setvbuf+0xfc>
 8001568:	68bc      	ldr	r4, [r7, #8]
 800156a:	e793      	b.n	8001494 <setvbuf+0x24>
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <setvbuf+0x188>)
 800156e:	429c      	cmp	r4, r3
 8001570:	bf08      	it	eq
 8001572:	68fc      	ldreq	r4, [r7, #12]
 8001574:	e78e      	b.n	8001494 <setvbuf+0x24>
 8001576:	2e00      	cmp	r6, #0
 8001578:	d0cd      	beq.n	8001516 <setvbuf+0xa6>
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	b913      	cbnz	r3, 8001584 <setvbuf+0x114>
 800157e:	4638      	mov	r0, r7
 8001580:	f000 f956 	bl	8001830 <__sinit>
 8001584:	f1b8 0f01 	cmp.w	r8, #1
 8001588:	bf08      	it	eq
 800158a:	89a3      	ldrheq	r3, [r4, #12]
 800158c:	6026      	str	r6, [r4, #0]
 800158e:	bf04      	itt	eq
 8001590:	f043 0301 	orreq.w	r3, r3, #1
 8001594:	81a3      	strheq	r3, [r4, #12]
 8001596:	89a2      	ldrh	r2, [r4, #12]
 8001598:	f012 0308 	ands.w	r3, r2, #8
 800159c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80015a0:	d01c      	beq.n	80015dc <setvbuf+0x16c>
 80015a2:	07d3      	lsls	r3, r2, #31
 80015a4:	bf41      	itttt	mi
 80015a6:	2300      	movmi	r3, #0
 80015a8:	426d      	negmi	r5, r5
 80015aa:	60a3      	strmi	r3, [r4, #8]
 80015ac:	61a5      	strmi	r5, [r4, #24]
 80015ae:	bf58      	it	pl
 80015b0:	60a5      	strpl	r5, [r4, #8]
 80015b2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80015b4:	f015 0501 	ands.w	r5, r5, #1
 80015b8:	d115      	bne.n	80015e6 <setvbuf+0x176>
 80015ba:	f412 7f00 	tst.w	r2, #512	; 0x200
 80015be:	e7c8      	b.n	8001552 <setvbuf+0xe2>
 80015c0:	4648      	mov	r0, r9
 80015c2:	f000 f9fb 	bl	80019bc <malloc>
 80015c6:	4606      	mov	r6, r0
 80015c8:	2800      	cmp	r0, #0
 80015ca:	d0ae      	beq.n	800152a <setvbuf+0xba>
 80015cc:	464d      	mov	r5, r9
 80015ce:	89a3      	ldrh	r3, [r4, #12]
 80015d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d4:	81a3      	strh	r3, [r4, #12]
 80015d6:	e7d0      	b.n	800157a <setvbuf+0x10a>
 80015d8:	2500      	movs	r5, #0
 80015da:	e7a8      	b.n	800152e <setvbuf+0xbe>
 80015dc:	60a3      	str	r3, [r4, #8]
 80015de:	e7e8      	b.n	80015b2 <setvbuf+0x142>
 80015e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80015e4:	e7b9      	b.n	800155a <setvbuf+0xea>
 80015e6:	2500      	movs	r5, #0
 80015e8:	e7b7      	b.n	800155a <setvbuf+0xea>
 80015ea:	bf00      	nop
 80015ec:	20000030 	.word	0x20000030
 80015f0:	08001dfc 	.word	0x08001dfc
 80015f4:	08001e1c 	.word	0x08001e1c
 80015f8:	08001ddc 	.word	0x08001ddc

080015fc <__sflush_r>:
 80015fc:	898a      	ldrh	r2, [r1, #12]
 80015fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001602:	4605      	mov	r5, r0
 8001604:	0710      	lsls	r0, r2, #28
 8001606:	460c      	mov	r4, r1
 8001608:	d458      	bmi.n	80016bc <__sflush_r+0xc0>
 800160a:	684b      	ldr	r3, [r1, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	dc05      	bgt.n	800161c <__sflush_r+0x20>
 8001610:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001612:	2b00      	cmp	r3, #0
 8001614:	dc02      	bgt.n	800161c <__sflush_r+0x20>
 8001616:	2000      	movs	r0, #0
 8001618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800161c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800161e:	2e00      	cmp	r6, #0
 8001620:	d0f9      	beq.n	8001616 <__sflush_r+0x1a>
 8001622:	2300      	movs	r3, #0
 8001624:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001628:	682f      	ldr	r7, [r5, #0]
 800162a:	602b      	str	r3, [r5, #0]
 800162c:	d032      	beq.n	8001694 <__sflush_r+0x98>
 800162e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001630:	89a3      	ldrh	r3, [r4, #12]
 8001632:	075a      	lsls	r2, r3, #29
 8001634:	d505      	bpl.n	8001642 <__sflush_r+0x46>
 8001636:	6863      	ldr	r3, [r4, #4]
 8001638:	1ac0      	subs	r0, r0, r3
 800163a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800163c:	b10b      	cbz	r3, 8001642 <__sflush_r+0x46>
 800163e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001640:	1ac0      	subs	r0, r0, r3
 8001642:	2300      	movs	r3, #0
 8001644:	4602      	mov	r2, r0
 8001646:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001648:	6a21      	ldr	r1, [r4, #32]
 800164a:	4628      	mov	r0, r5
 800164c:	47b0      	blx	r6
 800164e:	1c43      	adds	r3, r0, #1
 8001650:	89a3      	ldrh	r3, [r4, #12]
 8001652:	d106      	bne.n	8001662 <__sflush_r+0x66>
 8001654:	6829      	ldr	r1, [r5, #0]
 8001656:	291d      	cmp	r1, #29
 8001658:	d82c      	bhi.n	80016b4 <__sflush_r+0xb8>
 800165a:	4a2a      	ldr	r2, [pc, #168]	; (8001704 <__sflush_r+0x108>)
 800165c:	40ca      	lsrs	r2, r1
 800165e:	07d6      	lsls	r6, r2, #31
 8001660:	d528      	bpl.n	80016b4 <__sflush_r+0xb8>
 8001662:	2200      	movs	r2, #0
 8001664:	6062      	str	r2, [r4, #4]
 8001666:	04d9      	lsls	r1, r3, #19
 8001668:	6922      	ldr	r2, [r4, #16]
 800166a:	6022      	str	r2, [r4, #0]
 800166c:	d504      	bpl.n	8001678 <__sflush_r+0x7c>
 800166e:	1c42      	adds	r2, r0, #1
 8001670:	d101      	bne.n	8001676 <__sflush_r+0x7a>
 8001672:	682b      	ldr	r3, [r5, #0]
 8001674:	b903      	cbnz	r3, 8001678 <__sflush_r+0x7c>
 8001676:	6560      	str	r0, [r4, #84]	; 0x54
 8001678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800167a:	602f      	str	r7, [r5, #0]
 800167c:	2900      	cmp	r1, #0
 800167e:	d0ca      	beq.n	8001616 <__sflush_r+0x1a>
 8001680:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001684:	4299      	cmp	r1, r3
 8001686:	d002      	beq.n	800168e <__sflush_r+0x92>
 8001688:	4628      	mov	r0, r5
 800168a:	f000 f99f 	bl	80019cc <_free_r>
 800168e:	2000      	movs	r0, #0
 8001690:	6360      	str	r0, [r4, #52]	; 0x34
 8001692:	e7c1      	b.n	8001618 <__sflush_r+0x1c>
 8001694:	6a21      	ldr	r1, [r4, #32]
 8001696:	2301      	movs	r3, #1
 8001698:	4628      	mov	r0, r5
 800169a:	47b0      	blx	r6
 800169c:	1c41      	adds	r1, r0, #1
 800169e:	d1c7      	bne.n	8001630 <__sflush_r+0x34>
 80016a0:	682b      	ldr	r3, [r5, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0c4      	beq.n	8001630 <__sflush_r+0x34>
 80016a6:	2b1d      	cmp	r3, #29
 80016a8:	d001      	beq.n	80016ae <__sflush_r+0xb2>
 80016aa:	2b16      	cmp	r3, #22
 80016ac:	d101      	bne.n	80016b2 <__sflush_r+0xb6>
 80016ae:	602f      	str	r7, [r5, #0]
 80016b0:	e7b1      	b.n	8001616 <__sflush_r+0x1a>
 80016b2:	89a3      	ldrh	r3, [r4, #12]
 80016b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016b8:	81a3      	strh	r3, [r4, #12]
 80016ba:	e7ad      	b.n	8001618 <__sflush_r+0x1c>
 80016bc:	690f      	ldr	r7, [r1, #16]
 80016be:	2f00      	cmp	r7, #0
 80016c0:	d0a9      	beq.n	8001616 <__sflush_r+0x1a>
 80016c2:	0793      	lsls	r3, r2, #30
 80016c4:	680e      	ldr	r6, [r1, #0]
 80016c6:	bf08      	it	eq
 80016c8:	694b      	ldreq	r3, [r1, #20]
 80016ca:	600f      	str	r7, [r1, #0]
 80016cc:	bf18      	it	ne
 80016ce:	2300      	movne	r3, #0
 80016d0:	eba6 0807 	sub.w	r8, r6, r7
 80016d4:	608b      	str	r3, [r1, #8]
 80016d6:	f1b8 0f00 	cmp.w	r8, #0
 80016da:	dd9c      	ble.n	8001616 <__sflush_r+0x1a>
 80016dc:	6a21      	ldr	r1, [r4, #32]
 80016de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80016e0:	4643      	mov	r3, r8
 80016e2:	463a      	mov	r2, r7
 80016e4:	4628      	mov	r0, r5
 80016e6:	47b0      	blx	r6
 80016e8:	2800      	cmp	r0, #0
 80016ea:	dc06      	bgt.n	80016fa <__sflush_r+0xfe>
 80016ec:	89a3      	ldrh	r3, [r4, #12]
 80016ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f2:	81a3      	strh	r3, [r4, #12]
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016f8:	e78e      	b.n	8001618 <__sflush_r+0x1c>
 80016fa:	4407      	add	r7, r0
 80016fc:	eba8 0800 	sub.w	r8, r8, r0
 8001700:	e7e9      	b.n	80016d6 <__sflush_r+0xda>
 8001702:	bf00      	nop
 8001704:	20400001 	.word	0x20400001

08001708 <_fflush_r>:
 8001708:	b538      	push	{r3, r4, r5, lr}
 800170a:	690b      	ldr	r3, [r1, #16]
 800170c:	4605      	mov	r5, r0
 800170e:	460c      	mov	r4, r1
 8001710:	b913      	cbnz	r3, 8001718 <_fflush_r+0x10>
 8001712:	2500      	movs	r5, #0
 8001714:	4628      	mov	r0, r5
 8001716:	bd38      	pop	{r3, r4, r5, pc}
 8001718:	b118      	cbz	r0, 8001722 <_fflush_r+0x1a>
 800171a:	6983      	ldr	r3, [r0, #24]
 800171c:	b90b      	cbnz	r3, 8001722 <_fflush_r+0x1a>
 800171e:	f000 f887 	bl	8001830 <__sinit>
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <_fflush_r+0x6c>)
 8001724:	429c      	cmp	r4, r3
 8001726:	d11b      	bne.n	8001760 <_fflush_r+0x58>
 8001728:	686c      	ldr	r4, [r5, #4]
 800172a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0ef      	beq.n	8001712 <_fflush_r+0xa>
 8001732:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001734:	07d0      	lsls	r0, r2, #31
 8001736:	d404      	bmi.n	8001742 <_fflush_r+0x3a>
 8001738:	0599      	lsls	r1, r3, #22
 800173a:	d402      	bmi.n	8001742 <_fflush_r+0x3a>
 800173c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800173e:	f000 f915 	bl	800196c <__retarget_lock_acquire_recursive>
 8001742:	4628      	mov	r0, r5
 8001744:	4621      	mov	r1, r4
 8001746:	f7ff ff59 	bl	80015fc <__sflush_r>
 800174a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800174c:	07da      	lsls	r2, r3, #31
 800174e:	4605      	mov	r5, r0
 8001750:	d4e0      	bmi.n	8001714 <_fflush_r+0xc>
 8001752:	89a3      	ldrh	r3, [r4, #12]
 8001754:	059b      	lsls	r3, r3, #22
 8001756:	d4dd      	bmi.n	8001714 <_fflush_r+0xc>
 8001758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800175a:	f000 f908 	bl	800196e <__retarget_lock_release_recursive>
 800175e:	e7d9      	b.n	8001714 <_fflush_r+0xc>
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <_fflush_r+0x70>)
 8001762:	429c      	cmp	r4, r3
 8001764:	d101      	bne.n	800176a <_fflush_r+0x62>
 8001766:	68ac      	ldr	r4, [r5, #8]
 8001768:	e7df      	b.n	800172a <_fflush_r+0x22>
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <_fflush_r+0x74>)
 800176c:	429c      	cmp	r4, r3
 800176e:	bf08      	it	eq
 8001770:	68ec      	ldreq	r4, [r5, #12]
 8001772:	e7da      	b.n	800172a <_fflush_r+0x22>
 8001774:	08001dfc 	.word	0x08001dfc
 8001778:	08001e1c 	.word	0x08001e1c
 800177c:	08001ddc 	.word	0x08001ddc

08001780 <std>:
 8001780:	2300      	movs	r3, #0
 8001782:	b510      	push	{r4, lr}
 8001784:	4604      	mov	r4, r0
 8001786:	e9c0 3300 	strd	r3, r3, [r0]
 800178a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800178e:	6083      	str	r3, [r0, #8]
 8001790:	8181      	strh	r1, [r0, #12]
 8001792:	6643      	str	r3, [r0, #100]	; 0x64
 8001794:	81c2      	strh	r2, [r0, #14]
 8001796:	6183      	str	r3, [r0, #24]
 8001798:	4619      	mov	r1, r3
 800179a:	2208      	movs	r2, #8
 800179c:	305c      	adds	r0, #92	; 0x5c
 800179e:	f7ff fe57 	bl	8001450 <memset>
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <std+0x38>)
 80017a4:	6263      	str	r3, [r4, #36]	; 0x24
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <std+0x3c>)
 80017a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80017aa:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <std+0x40>)
 80017ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <std+0x44>)
 80017b0:	6224      	str	r4, [r4, #32]
 80017b2:	6323      	str	r3, [r4, #48]	; 0x30
 80017b4:	bd10      	pop	{r4, pc}
 80017b6:	bf00      	nop
 80017b8:	08001bad 	.word	0x08001bad
 80017bc:	08001bcf 	.word	0x08001bcf
 80017c0:	08001c07 	.word	0x08001c07
 80017c4:	08001c2b 	.word	0x08001c2b

080017c8 <_cleanup_r>:
 80017c8:	4901      	ldr	r1, [pc, #4]	; (80017d0 <_cleanup_r+0x8>)
 80017ca:	f000 b8af 	b.w	800192c <_fwalk_reent>
 80017ce:	bf00      	nop
 80017d0:	08001709 	.word	0x08001709

080017d4 <__sfmoreglue>:
 80017d4:	b570      	push	{r4, r5, r6, lr}
 80017d6:	2268      	movs	r2, #104	; 0x68
 80017d8:	1e4d      	subs	r5, r1, #1
 80017da:	4355      	muls	r5, r2
 80017dc:	460e      	mov	r6, r1
 80017de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80017e2:	f000 f95f 	bl	8001aa4 <_malloc_r>
 80017e6:	4604      	mov	r4, r0
 80017e8:	b140      	cbz	r0, 80017fc <__sfmoreglue+0x28>
 80017ea:	2100      	movs	r1, #0
 80017ec:	e9c0 1600 	strd	r1, r6, [r0]
 80017f0:	300c      	adds	r0, #12
 80017f2:	60a0      	str	r0, [r4, #8]
 80017f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80017f8:	f7ff fe2a 	bl	8001450 <memset>
 80017fc:	4620      	mov	r0, r4
 80017fe:	bd70      	pop	{r4, r5, r6, pc}

08001800 <__sfp_lock_acquire>:
 8001800:	4801      	ldr	r0, [pc, #4]	; (8001808 <__sfp_lock_acquire+0x8>)
 8001802:	f000 b8b3 	b.w	800196c <__retarget_lock_acquire_recursive>
 8001806:	bf00      	nop
 8001808:	200001b9 	.word	0x200001b9

0800180c <__sfp_lock_release>:
 800180c:	4801      	ldr	r0, [pc, #4]	; (8001814 <__sfp_lock_release+0x8>)
 800180e:	f000 b8ae 	b.w	800196e <__retarget_lock_release_recursive>
 8001812:	bf00      	nop
 8001814:	200001b9 	.word	0x200001b9

08001818 <__sinit_lock_acquire>:
 8001818:	4801      	ldr	r0, [pc, #4]	; (8001820 <__sinit_lock_acquire+0x8>)
 800181a:	f000 b8a7 	b.w	800196c <__retarget_lock_acquire_recursive>
 800181e:	bf00      	nop
 8001820:	200001ba 	.word	0x200001ba

08001824 <__sinit_lock_release>:
 8001824:	4801      	ldr	r0, [pc, #4]	; (800182c <__sinit_lock_release+0x8>)
 8001826:	f000 b8a2 	b.w	800196e <__retarget_lock_release_recursive>
 800182a:	bf00      	nop
 800182c:	200001ba 	.word	0x200001ba

08001830 <__sinit>:
 8001830:	b510      	push	{r4, lr}
 8001832:	4604      	mov	r4, r0
 8001834:	f7ff fff0 	bl	8001818 <__sinit_lock_acquire>
 8001838:	69a3      	ldr	r3, [r4, #24]
 800183a:	b11b      	cbz	r3, 8001844 <__sinit+0x14>
 800183c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001840:	f7ff bff0 	b.w	8001824 <__sinit_lock_release>
 8001844:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001848:	6523      	str	r3, [r4, #80]	; 0x50
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <__sinit+0x68>)
 800184c:	4a13      	ldr	r2, [pc, #76]	; (800189c <__sinit+0x6c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	62a2      	str	r2, [r4, #40]	; 0x28
 8001852:	42a3      	cmp	r3, r4
 8001854:	bf04      	itt	eq
 8001856:	2301      	moveq	r3, #1
 8001858:	61a3      	streq	r3, [r4, #24]
 800185a:	4620      	mov	r0, r4
 800185c:	f000 f820 	bl	80018a0 <__sfp>
 8001860:	6060      	str	r0, [r4, #4]
 8001862:	4620      	mov	r0, r4
 8001864:	f000 f81c 	bl	80018a0 <__sfp>
 8001868:	60a0      	str	r0, [r4, #8]
 800186a:	4620      	mov	r0, r4
 800186c:	f000 f818 	bl	80018a0 <__sfp>
 8001870:	2200      	movs	r2, #0
 8001872:	60e0      	str	r0, [r4, #12]
 8001874:	2104      	movs	r1, #4
 8001876:	6860      	ldr	r0, [r4, #4]
 8001878:	f7ff ff82 	bl	8001780 <std>
 800187c:	68a0      	ldr	r0, [r4, #8]
 800187e:	2201      	movs	r2, #1
 8001880:	2109      	movs	r1, #9
 8001882:	f7ff ff7d 	bl	8001780 <std>
 8001886:	68e0      	ldr	r0, [r4, #12]
 8001888:	2202      	movs	r2, #2
 800188a:	2112      	movs	r1, #18
 800188c:	f7ff ff78 	bl	8001780 <std>
 8001890:	2301      	movs	r3, #1
 8001892:	61a3      	str	r3, [r4, #24]
 8001894:	e7d2      	b.n	800183c <__sinit+0xc>
 8001896:	bf00      	nop
 8001898:	08001dd8 	.word	0x08001dd8
 800189c:	080017c9 	.word	0x080017c9

080018a0 <__sfp>:
 80018a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a2:	4607      	mov	r7, r0
 80018a4:	f7ff ffac 	bl	8001800 <__sfp_lock_acquire>
 80018a8:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <__sfp+0x84>)
 80018aa:	681e      	ldr	r6, [r3, #0]
 80018ac:	69b3      	ldr	r3, [r6, #24]
 80018ae:	b913      	cbnz	r3, 80018b6 <__sfp+0x16>
 80018b0:	4630      	mov	r0, r6
 80018b2:	f7ff ffbd 	bl	8001830 <__sinit>
 80018b6:	3648      	adds	r6, #72	; 0x48
 80018b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80018bc:	3b01      	subs	r3, #1
 80018be:	d503      	bpl.n	80018c8 <__sfp+0x28>
 80018c0:	6833      	ldr	r3, [r6, #0]
 80018c2:	b30b      	cbz	r3, 8001908 <__sfp+0x68>
 80018c4:	6836      	ldr	r6, [r6, #0]
 80018c6:	e7f7      	b.n	80018b8 <__sfp+0x18>
 80018c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80018cc:	b9d5      	cbnz	r5, 8001904 <__sfp+0x64>
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <__sfp+0x88>)
 80018d0:	60e3      	str	r3, [r4, #12]
 80018d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80018d6:	6665      	str	r5, [r4, #100]	; 0x64
 80018d8:	f000 f847 	bl	800196a <__retarget_lock_init_recursive>
 80018dc:	f7ff ff96 	bl	800180c <__sfp_lock_release>
 80018e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80018e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80018e8:	6025      	str	r5, [r4, #0]
 80018ea:	61a5      	str	r5, [r4, #24]
 80018ec:	2208      	movs	r2, #8
 80018ee:	4629      	mov	r1, r5
 80018f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80018f4:	f7ff fdac 	bl	8001450 <memset>
 80018f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80018fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001900:	4620      	mov	r0, r4
 8001902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001904:	3468      	adds	r4, #104	; 0x68
 8001906:	e7d9      	b.n	80018bc <__sfp+0x1c>
 8001908:	2104      	movs	r1, #4
 800190a:	4638      	mov	r0, r7
 800190c:	f7ff ff62 	bl	80017d4 <__sfmoreglue>
 8001910:	4604      	mov	r4, r0
 8001912:	6030      	str	r0, [r6, #0]
 8001914:	2800      	cmp	r0, #0
 8001916:	d1d5      	bne.n	80018c4 <__sfp+0x24>
 8001918:	f7ff ff78 	bl	800180c <__sfp_lock_release>
 800191c:	230c      	movs	r3, #12
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	e7ee      	b.n	8001900 <__sfp+0x60>
 8001922:	bf00      	nop
 8001924:	08001dd8 	.word	0x08001dd8
 8001928:	ffff0001 	.word	0xffff0001

0800192c <_fwalk_reent>:
 800192c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001930:	4606      	mov	r6, r0
 8001932:	4688      	mov	r8, r1
 8001934:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001938:	2700      	movs	r7, #0
 800193a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800193e:	f1b9 0901 	subs.w	r9, r9, #1
 8001942:	d505      	bpl.n	8001950 <_fwalk_reent+0x24>
 8001944:	6824      	ldr	r4, [r4, #0]
 8001946:	2c00      	cmp	r4, #0
 8001948:	d1f7      	bne.n	800193a <_fwalk_reent+0xe>
 800194a:	4638      	mov	r0, r7
 800194c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001950:	89ab      	ldrh	r3, [r5, #12]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d907      	bls.n	8001966 <_fwalk_reent+0x3a>
 8001956:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800195a:	3301      	adds	r3, #1
 800195c:	d003      	beq.n	8001966 <_fwalk_reent+0x3a>
 800195e:	4629      	mov	r1, r5
 8001960:	4630      	mov	r0, r6
 8001962:	47c0      	blx	r8
 8001964:	4307      	orrs	r7, r0
 8001966:	3568      	adds	r5, #104	; 0x68
 8001968:	e7e9      	b.n	800193e <_fwalk_reent+0x12>

0800196a <__retarget_lock_init_recursive>:
 800196a:	4770      	bx	lr

0800196c <__retarget_lock_acquire_recursive>:
 800196c:	4770      	bx	lr

0800196e <__retarget_lock_release_recursive>:
 800196e:	4770      	bx	lr

08001970 <__swhatbuf_r>:
 8001970:	b570      	push	{r4, r5, r6, lr}
 8001972:	460e      	mov	r6, r1
 8001974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001978:	2900      	cmp	r1, #0
 800197a:	b096      	sub	sp, #88	; 0x58
 800197c:	4614      	mov	r4, r2
 800197e:	461d      	mov	r5, r3
 8001980:	da08      	bge.n	8001994 <__swhatbuf_r+0x24>
 8001982:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	602a      	str	r2, [r5, #0]
 800198a:	061a      	lsls	r2, r3, #24
 800198c:	d410      	bmi.n	80019b0 <__swhatbuf_r+0x40>
 800198e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001992:	e00e      	b.n	80019b2 <__swhatbuf_r+0x42>
 8001994:	466a      	mov	r2, sp
 8001996:	f000 f95d 	bl	8001c54 <_fstat_r>
 800199a:	2800      	cmp	r0, #0
 800199c:	dbf1      	blt.n	8001982 <__swhatbuf_r+0x12>
 800199e:	9a01      	ldr	r2, [sp, #4]
 80019a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80019a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80019a8:	425a      	negs	r2, r3
 80019aa:	415a      	adcs	r2, r3
 80019ac:	602a      	str	r2, [r5, #0]
 80019ae:	e7ee      	b.n	800198e <__swhatbuf_r+0x1e>
 80019b0:	2340      	movs	r3, #64	; 0x40
 80019b2:	2000      	movs	r0, #0
 80019b4:	6023      	str	r3, [r4, #0]
 80019b6:	b016      	add	sp, #88	; 0x58
 80019b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080019bc <malloc>:
 80019bc:	4b02      	ldr	r3, [pc, #8]	; (80019c8 <malloc+0xc>)
 80019be:	4601      	mov	r1, r0
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	f000 b86f 	b.w	8001aa4 <_malloc_r>
 80019c6:	bf00      	nop
 80019c8:	20000030 	.word	0x20000030

080019cc <_free_r>:
 80019cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80019ce:	2900      	cmp	r1, #0
 80019d0:	d044      	beq.n	8001a5c <_free_r+0x90>
 80019d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019d6:	9001      	str	r0, [sp, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f1a1 0404 	sub.w	r4, r1, #4
 80019de:	bfb8      	it	lt
 80019e0:	18e4      	addlt	r4, r4, r3
 80019e2:	f000 f95b 	bl	8001c9c <__malloc_lock>
 80019e6:	4a1e      	ldr	r2, [pc, #120]	; (8001a60 <_free_r+0x94>)
 80019e8:	9801      	ldr	r0, [sp, #4]
 80019ea:	6813      	ldr	r3, [r2, #0]
 80019ec:	b933      	cbnz	r3, 80019fc <_free_r+0x30>
 80019ee:	6063      	str	r3, [r4, #4]
 80019f0:	6014      	str	r4, [r2, #0]
 80019f2:	b003      	add	sp, #12
 80019f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80019f8:	f000 b956 	b.w	8001ca8 <__malloc_unlock>
 80019fc:	42a3      	cmp	r3, r4
 80019fe:	d908      	bls.n	8001a12 <_free_r+0x46>
 8001a00:	6825      	ldr	r5, [r4, #0]
 8001a02:	1961      	adds	r1, r4, r5
 8001a04:	428b      	cmp	r3, r1
 8001a06:	bf01      	itttt	eq
 8001a08:	6819      	ldreq	r1, [r3, #0]
 8001a0a:	685b      	ldreq	r3, [r3, #4]
 8001a0c:	1949      	addeq	r1, r1, r5
 8001a0e:	6021      	streq	r1, [r4, #0]
 8001a10:	e7ed      	b.n	80019ee <_free_r+0x22>
 8001a12:	461a      	mov	r2, r3
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	b10b      	cbz	r3, 8001a1c <_free_r+0x50>
 8001a18:	42a3      	cmp	r3, r4
 8001a1a:	d9fa      	bls.n	8001a12 <_free_r+0x46>
 8001a1c:	6811      	ldr	r1, [r2, #0]
 8001a1e:	1855      	adds	r5, r2, r1
 8001a20:	42a5      	cmp	r5, r4
 8001a22:	d10b      	bne.n	8001a3c <_free_r+0x70>
 8001a24:	6824      	ldr	r4, [r4, #0]
 8001a26:	4421      	add	r1, r4
 8001a28:	1854      	adds	r4, r2, r1
 8001a2a:	42a3      	cmp	r3, r4
 8001a2c:	6011      	str	r1, [r2, #0]
 8001a2e:	d1e0      	bne.n	80019f2 <_free_r+0x26>
 8001a30:	681c      	ldr	r4, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	6053      	str	r3, [r2, #4]
 8001a36:	4421      	add	r1, r4
 8001a38:	6011      	str	r1, [r2, #0]
 8001a3a:	e7da      	b.n	80019f2 <_free_r+0x26>
 8001a3c:	d902      	bls.n	8001a44 <_free_r+0x78>
 8001a3e:	230c      	movs	r3, #12
 8001a40:	6003      	str	r3, [r0, #0]
 8001a42:	e7d6      	b.n	80019f2 <_free_r+0x26>
 8001a44:	6825      	ldr	r5, [r4, #0]
 8001a46:	1961      	adds	r1, r4, r5
 8001a48:	428b      	cmp	r3, r1
 8001a4a:	bf04      	itt	eq
 8001a4c:	6819      	ldreq	r1, [r3, #0]
 8001a4e:	685b      	ldreq	r3, [r3, #4]
 8001a50:	6063      	str	r3, [r4, #4]
 8001a52:	bf04      	itt	eq
 8001a54:	1949      	addeq	r1, r1, r5
 8001a56:	6021      	streq	r1, [r4, #0]
 8001a58:	6054      	str	r4, [r2, #4]
 8001a5a:	e7ca      	b.n	80019f2 <_free_r+0x26>
 8001a5c:	b003      	add	sp, #12
 8001a5e:	bd30      	pop	{r4, r5, pc}
 8001a60:	200001bc 	.word	0x200001bc

08001a64 <sbrk_aligned>:
 8001a64:	b570      	push	{r4, r5, r6, lr}
 8001a66:	4e0e      	ldr	r6, [pc, #56]	; (8001aa0 <sbrk_aligned+0x3c>)
 8001a68:	460c      	mov	r4, r1
 8001a6a:	6831      	ldr	r1, [r6, #0]
 8001a6c:	4605      	mov	r5, r0
 8001a6e:	b911      	cbnz	r1, 8001a76 <sbrk_aligned+0x12>
 8001a70:	f000 f88c 	bl	8001b8c <_sbrk_r>
 8001a74:	6030      	str	r0, [r6, #0]
 8001a76:	4621      	mov	r1, r4
 8001a78:	4628      	mov	r0, r5
 8001a7a:	f000 f887 	bl	8001b8c <_sbrk_r>
 8001a7e:	1c43      	adds	r3, r0, #1
 8001a80:	d00a      	beq.n	8001a98 <sbrk_aligned+0x34>
 8001a82:	1cc4      	adds	r4, r0, #3
 8001a84:	f024 0403 	bic.w	r4, r4, #3
 8001a88:	42a0      	cmp	r0, r4
 8001a8a:	d007      	beq.n	8001a9c <sbrk_aligned+0x38>
 8001a8c:	1a21      	subs	r1, r4, r0
 8001a8e:	4628      	mov	r0, r5
 8001a90:	f000 f87c 	bl	8001b8c <_sbrk_r>
 8001a94:	3001      	adds	r0, #1
 8001a96:	d101      	bne.n	8001a9c <sbrk_aligned+0x38>
 8001a98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	bd70      	pop	{r4, r5, r6, pc}
 8001aa0:	200001c0 	.word	0x200001c0

08001aa4 <_malloc_r>:
 8001aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aa8:	1ccd      	adds	r5, r1, #3
 8001aaa:	f025 0503 	bic.w	r5, r5, #3
 8001aae:	3508      	adds	r5, #8
 8001ab0:	2d0c      	cmp	r5, #12
 8001ab2:	bf38      	it	cc
 8001ab4:	250c      	movcc	r5, #12
 8001ab6:	2d00      	cmp	r5, #0
 8001ab8:	4607      	mov	r7, r0
 8001aba:	db01      	blt.n	8001ac0 <_malloc_r+0x1c>
 8001abc:	42a9      	cmp	r1, r5
 8001abe:	d905      	bls.n	8001acc <_malloc_r+0x28>
 8001ac0:	230c      	movs	r3, #12
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	2600      	movs	r6, #0
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001acc:	4e2e      	ldr	r6, [pc, #184]	; (8001b88 <_malloc_r+0xe4>)
 8001ace:	f000 f8e5 	bl	8001c9c <__malloc_lock>
 8001ad2:	6833      	ldr	r3, [r6, #0]
 8001ad4:	461c      	mov	r4, r3
 8001ad6:	bb34      	cbnz	r4, 8001b26 <_malloc_r+0x82>
 8001ad8:	4629      	mov	r1, r5
 8001ada:	4638      	mov	r0, r7
 8001adc:	f7ff ffc2 	bl	8001a64 <sbrk_aligned>
 8001ae0:	1c43      	adds	r3, r0, #1
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	d14d      	bne.n	8001b82 <_malloc_r+0xde>
 8001ae6:	6834      	ldr	r4, [r6, #0]
 8001ae8:	4626      	mov	r6, r4
 8001aea:	2e00      	cmp	r6, #0
 8001aec:	d140      	bne.n	8001b70 <_malloc_r+0xcc>
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	4631      	mov	r1, r6
 8001af2:	4638      	mov	r0, r7
 8001af4:	eb04 0803 	add.w	r8, r4, r3
 8001af8:	f000 f848 	bl	8001b8c <_sbrk_r>
 8001afc:	4580      	cmp	r8, r0
 8001afe:	d13a      	bne.n	8001b76 <_malloc_r+0xd2>
 8001b00:	6821      	ldr	r1, [r4, #0]
 8001b02:	3503      	adds	r5, #3
 8001b04:	1a6d      	subs	r5, r5, r1
 8001b06:	f025 0503 	bic.w	r5, r5, #3
 8001b0a:	3508      	adds	r5, #8
 8001b0c:	2d0c      	cmp	r5, #12
 8001b0e:	bf38      	it	cc
 8001b10:	250c      	movcc	r5, #12
 8001b12:	4629      	mov	r1, r5
 8001b14:	4638      	mov	r0, r7
 8001b16:	f7ff ffa5 	bl	8001a64 <sbrk_aligned>
 8001b1a:	3001      	adds	r0, #1
 8001b1c:	d02b      	beq.n	8001b76 <_malloc_r+0xd2>
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	442b      	add	r3, r5
 8001b22:	6023      	str	r3, [r4, #0]
 8001b24:	e00e      	b.n	8001b44 <_malloc_r+0xa0>
 8001b26:	6822      	ldr	r2, [r4, #0]
 8001b28:	1b52      	subs	r2, r2, r5
 8001b2a:	d41e      	bmi.n	8001b6a <_malloc_r+0xc6>
 8001b2c:	2a0b      	cmp	r2, #11
 8001b2e:	d916      	bls.n	8001b5e <_malloc_r+0xba>
 8001b30:	1961      	adds	r1, r4, r5
 8001b32:	42a3      	cmp	r3, r4
 8001b34:	6025      	str	r5, [r4, #0]
 8001b36:	bf18      	it	ne
 8001b38:	6059      	strne	r1, [r3, #4]
 8001b3a:	6863      	ldr	r3, [r4, #4]
 8001b3c:	bf08      	it	eq
 8001b3e:	6031      	streq	r1, [r6, #0]
 8001b40:	5162      	str	r2, [r4, r5]
 8001b42:	604b      	str	r3, [r1, #4]
 8001b44:	4638      	mov	r0, r7
 8001b46:	f104 060b 	add.w	r6, r4, #11
 8001b4a:	f000 f8ad 	bl	8001ca8 <__malloc_unlock>
 8001b4e:	f026 0607 	bic.w	r6, r6, #7
 8001b52:	1d23      	adds	r3, r4, #4
 8001b54:	1af2      	subs	r2, r6, r3
 8001b56:	d0b6      	beq.n	8001ac6 <_malloc_r+0x22>
 8001b58:	1b9b      	subs	r3, r3, r6
 8001b5a:	50a3      	str	r3, [r4, r2]
 8001b5c:	e7b3      	b.n	8001ac6 <_malloc_r+0x22>
 8001b5e:	6862      	ldr	r2, [r4, #4]
 8001b60:	42a3      	cmp	r3, r4
 8001b62:	bf0c      	ite	eq
 8001b64:	6032      	streq	r2, [r6, #0]
 8001b66:	605a      	strne	r2, [r3, #4]
 8001b68:	e7ec      	b.n	8001b44 <_malloc_r+0xa0>
 8001b6a:	4623      	mov	r3, r4
 8001b6c:	6864      	ldr	r4, [r4, #4]
 8001b6e:	e7b2      	b.n	8001ad6 <_malloc_r+0x32>
 8001b70:	4634      	mov	r4, r6
 8001b72:	6876      	ldr	r6, [r6, #4]
 8001b74:	e7b9      	b.n	8001aea <_malloc_r+0x46>
 8001b76:	230c      	movs	r3, #12
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	4638      	mov	r0, r7
 8001b7c:	f000 f894 	bl	8001ca8 <__malloc_unlock>
 8001b80:	e7a1      	b.n	8001ac6 <_malloc_r+0x22>
 8001b82:	6025      	str	r5, [r4, #0]
 8001b84:	e7de      	b.n	8001b44 <_malloc_r+0xa0>
 8001b86:	bf00      	nop
 8001b88:	200001bc 	.word	0x200001bc

08001b8c <_sbrk_r>:
 8001b8c:	b538      	push	{r3, r4, r5, lr}
 8001b8e:	4d06      	ldr	r5, [pc, #24]	; (8001ba8 <_sbrk_r+0x1c>)
 8001b90:	2300      	movs	r3, #0
 8001b92:	4604      	mov	r4, r0
 8001b94:	4608      	mov	r0, r1
 8001b96:	602b      	str	r3, [r5, #0]
 8001b98:	f7ff fb46 	bl	8001228 <_sbrk>
 8001b9c:	1c43      	adds	r3, r0, #1
 8001b9e:	d102      	bne.n	8001ba6 <_sbrk_r+0x1a>
 8001ba0:	682b      	ldr	r3, [r5, #0]
 8001ba2:	b103      	cbz	r3, 8001ba6 <_sbrk_r+0x1a>
 8001ba4:	6023      	str	r3, [r4, #0]
 8001ba6:	bd38      	pop	{r3, r4, r5, pc}
 8001ba8:	200001c4 	.word	0x200001c4

08001bac <__sread>:
 8001bac:	b510      	push	{r4, lr}
 8001bae:	460c      	mov	r4, r1
 8001bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bb4:	f000 f87e 	bl	8001cb4 <_read_r>
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	bfab      	itete	ge
 8001bbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001bbe:	89a3      	ldrhlt	r3, [r4, #12]
 8001bc0:	181b      	addge	r3, r3, r0
 8001bc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001bc6:	bfac      	ite	ge
 8001bc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001bca:	81a3      	strhlt	r3, [r4, #12]
 8001bcc:	bd10      	pop	{r4, pc}

08001bce <__swrite>:
 8001bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bd2:	461f      	mov	r7, r3
 8001bd4:	898b      	ldrh	r3, [r1, #12]
 8001bd6:	05db      	lsls	r3, r3, #23
 8001bd8:	4605      	mov	r5, r0
 8001bda:	460c      	mov	r4, r1
 8001bdc:	4616      	mov	r6, r2
 8001bde:	d505      	bpl.n	8001bec <__swrite+0x1e>
 8001be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001be4:	2302      	movs	r3, #2
 8001be6:	2200      	movs	r2, #0
 8001be8:	f000 f846 	bl	8001c78 <_lseek_r>
 8001bec:	89a3      	ldrh	r3, [r4, #12]
 8001bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001bf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bf6:	81a3      	strh	r3, [r4, #12]
 8001bf8:	4632      	mov	r2, r6
 8001bfa:	463b      	mov	r3, r7
 8001bfc:	4628      	mov	r0, r5
 8001bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c02:	f7ff b82b 	b.w	8000c5c <_write_r>

08001c06 <__sseek>:
 8001c06:	b510      	push	{r4, lr}
 8001c08:	460c      	mov	r4, r1
 8001c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c0e:	f000 f833 	bl	8001c78 <_lseek_r>
 8001c12:	1c43      	adds	r3, r0, #1
 8001c14:	89a3      	ldrh	r3, [r4, #12]
 8001c16:	bf15      	itete	ne
 8001c18:	6560      	strne	r0, [r4, #84]	; 0x54
 8001c1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001c1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c22:	81a3      	strheq	r3, [r4, #12]
 8001c24:	bf18      	it	ne
 8001c26:	81a3      	strhne	r3, [r4, #12]
 8001c28:	bd10      	pop	{r4, pc}

08001c2a <__sclose>:
 8001c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c2e:	f000 b801 	b.w	8001c34 <_close_r>
	...

08001c34 <_close_r>:
 8001c34:	b538      	push	{r3, r4, r5, lr}
 8001c36:	4d06      	ldr	r5, [pc, #24]	; (8001c50 <_close_r+0x1c>)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	4608      	mov	r0, r1
 8001c3e:	602b      	str	r3, [r5, #0]
 8001c40:	f7ff fac9 	bl	80011d6 <_close>
 8001c44:	1c43      	adds	r3, r0, #1
 8001c46:	d102      	bne.n	8001c4e <_close_r+0x1a>
 8001c48:	682b      	ldr	r3, [r5, #0]
 8001c4a:	b103      	cbz	r3, 8001c4e <_close_r+0x1a>
 8001c4c:	6023      	str	r3, [r4, #0]
 8001c4e:	bd38      	pop	{r3, r4, r5, pc}
 8001c50:	200001c4 	.word	0x200001c4

08001c54 <_fstat_r>:
 8001c54:	b538      	push	{r3, r4, r5, lr}
 8001c56:	4d07      	ldr	r5, [pc, #28]	; (8001c74 <_fstat_r+0x20>)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	4608      	mov	r0, r1
 8001c5e:	4611      	mov	r1, r2
 8001c60:	602b      	str	r3, [r5, #0]
 8001c62:	f7ff fac4 	bl	80011ee <_fstat>
 8001c66:	1c43      	adds	r3, r0, #1
 8001c68:	d102      	bne.n	8001c70 <_fstat_r+0x1c>
 8001c6a:	682b      	ldr	r3, [r5, #0]
 8001c6c:	b103      	cbz	r3, 8001c70 <_fstat_r+0x1c>
 8001c6e:	6023      	str	r3, [r4, #0]
 8001c70:	bd38      	pop	{r3, r4, r5, pc}
 8001c72:	bf00      	nop
 8001c74:	200001c4 	.word	0x200001c4

08001c78 <_lseek_r>:
 8001c78:	b538      	push	{r3, r4, r5, lr}
 8001c7a:	4d07      	ldr	r5, [pc, #28]	; (8001c98 <_lseek_r+0x20>)
 8001c7c:	4604      	mov	r4, r0
 8001c7e:	4608      	mov	r0, r1
 8001c80:	4611      	mov	r1, r2
 8001c82:	2200      	movs	r2, #0
 8001c84:	602a      	str	r2, [r5, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	f7ff fac1 	bl	800120e <_lseek>
 8001c8c:	1c43      	adds	r3, r0, #1
 8001c8e:	d102      	bne.n	8001c96 <_lseek_r+0x1e>
 8001c90:	682b      	ldr	r3, [r5, #0]
 8001c92:	b103      	cbz	r3, 8001c96 <_lseek_r+0x1e>
 8001c94:	6023      	str	r3, [r4, #0]
 8001c96:	bd38      	pop	{r3, r4, r5, pc}
 8001c98:	200001c4 	.word	0x200001c4

08001c9c <__malloc_lock>:
 8001c9c:	4801      	ldr	r0, [pc, #4]	; (8001ca4 <__malloc_lock+0x8>)
 8001c9e:	f7ff be65 	b.w	800196c <__retarget_lock_acquire_recursive>
 8001ca2:	bf00      	nop
 8001ca4:	200001b8 	.word	0x200001b8

08001ca8 <__malloc_unlock>:
 8001ca8:	4801      	ldr	r0, [pc, #4]	; (8001cb0 <__malloc_unlock+0x8>)
 8001caa:	f7ff be60 	b.w	800196e <__retarget_lock_release_recursive>
 8001cae:	bf00      	nop
 8001cb0:	200001b8 	.word	0x200001b8

08001cb4 <_read_r>:
 8001cb4:	b538      	push	{r3, r4, r5, lr}
 8001cb6:	4d07      	ldr	r5, [pc, #28]	; (8001cd4 <_read_r+0x20>)
 8001cb8:	4604      	mov	r4, r0
 8001cba:	4608      	mov	r0, r1
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	602a      	str	r2, [r5, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	f7ff fa6a 	bl	800119c <_read>
 8001cc8:	1c43      	adds	r3, r0, #1
 8001cca:	d102      	bne.n	8001cd2 <_read_r+0x1e>
 8001ccc:	682b      	ldr	r3, [r5, #0]
 8001cce:	b103      	cbz	r3, 8001cd2 <_read_r+0x1e>
 8001cd0:	6023      	str	r3, [r4, #0]
 8001cd2:	bd38      	pop	{r3, r4, r5, pc}
 8001cd4:	200001c4 	.word	0x200001c4

08001cd8 <_init>:
 8001cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cda:	bf00      	nop
 8001cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cde:	bc08      	pop	{r3}
 8001ce0:	469e      	mov	lr, r3
 8001ce2:	4770      	bx	lr

08001ce4 <_fini>:
 8001ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce6:	bf00      	nop
 8001ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cea:	bc08      	pop	{r3}
 8001cec:	469e      	mov	lr, r3
 8001cee:	4770      	bx	lr
